<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青苔小茶馆</title>
  
  
  <link href="https://derycktse.github.io/atom.xml" rel="self"/>
  
  <link href="https://derycktse.github.io/"/>
  <updated>2025-08-14T15:57:28.536Z</updated>
  <id>https://derycktse.github.io/</id>
  
  <author>
    <name>deryck.xie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记2025年8月12日网站运营商DNS解析异常</title>
    <link href="https://derycktse.github.io/2025/08/13/2025/2025-08-12-aliyun-dns-error/"/>
    <id>https://derycktse.github.io/2025/08/13/2025/2025-08-12-aliyun-dns-error/</id>
    <published>2025-08-13T04:13:00.000Z</published>
    <updated>2025-08-14T15:57:28.536Z</updated>
    
    <content type="html"><![CDATA[<p>2025-08-12 晚上大约 19:50 左右。作者接到网站告警电话，位于北京区的zabbix 探针告警，同时负责的许多站点都前后开始告警。</p><p>但是除了北京区的，作者负责的站点，在国内还有其他好几个区域的探针，都相安无事。</p><p>作者位于深圳，发现网站访问正常，且服务各指标都是正常的。</p><p>于是就推测要么是探针有问题，要么就是网站链路的上游出问题了。值得一提的是，作者的服务托管于阿里云上。</p><p>为了区分到底是zabbix 应用有问题，还是北京区域阿里云出了问题，于是我打开了全国拨测</p><p>20:00 使用阿里云的拨测工具，发现除了北京，还有全国其他节点出现问题，节点失败数 4&#x2F;150<br><img src="/source/images/image-2025-08-12-aliyun-dns-error-20250814234428.png"></p><p>既然从拨测结果上能看到异常，那么就排除了探针的问题，加上网站本上服务是正常的，基本就定位是阿里云节点或者是运营商DNS解析出问题了，DNS解析值 <code>127.0.0.2</code> 明显有问题。</p><p>大约在20:24的时候再拨测，范围更大了，看起来整个华北区域都受影响。<br><img src="/source/images/image-2025-08-12-aliyun-dns-error-20250814234259.png"></p><p>期间也等到阿里云公告，声明联通DNS异常</p><p><img src="/source/images/image-2025-08-11-aliyun-dns-error-20250814233108.png"><br>最后大约在21:00 左右，拨测结果全面恢复。</p>]]></content>
    
    
    <summary type="html">记2025年8月12日作者网站遇到的华北地区联通DNS解析异常</summary>
    
    
    
    
    <category term="network" scheme="https://derycktse.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>关于跨域cookie的传输-你需要知道的事</title>
    <link href="https://derycktse.github.io/2025/04/01/2025/cross-domain-cookie-transmission/"/>
    <id>https://derycktse.github.io/2025/04/01/2025/cross-domain-cookie-transmission/</id>
    <published>2025-04-01T04:13:00.000Z</published>
    <updated>2025-08-09T04:00:36.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>今天在对接一个业务，涉及到跨域但是需要透传cookie，本来以为自己已经熟悉浏览器的运作机制了，没想到又踩了个坑，在此记录一下。<br>背景大概是我所负责的A团队业务，需要调用B团队的接口，这是两个不同二级域名的业务，其中，涉及到业务A需要透传cookie到业务B（这种设计本身存在不合理性和安全隐患）。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>假设现在业务的两个域名为：<br>业务A: <a href="http://www.example.com/">www.example.com</a><br>业务B: api.example.org</p><p>为了验证调用正常，我提前在浏览器做了测试。</p><p>事先已经知道了肯定会有跨域问题，由于B团队还没有配置跨域白名单. 我使用抓包工具为 api.example.org 添加了所需的响应头。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/data</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>api.example.org</span><br><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>*</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span><span class="punctuation">: </span>true</span><br></pre></td></tr></table></figure><p>然后我很快写了个异步测试代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="attr">credentials</span>: <span class="string">&#x27;include&#x27;</span>, <span class="comment">// 传输cookie</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然而，浏览器仍然显示跨域请求失败。<br><img src="/../../images/cross-domain-cookie-transmission.png" alt="alt text"></p><!-- ![](https://github.com/user-attachments/assets/d53e20e7-5c77-44e9-a03f-01223def2c54) --><p>但我注意到，第一个请求preflight是200的，而第二个请求才报跨域错误。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>查阅了MDN文档，发现有一句话值得注意：</p><blockquote><p>Including credentials in cross-origin requests can make a site vulnerable to CSRF attacks, so even if credentials is set to include, the server must also agree to their inclusion by including the <code>Access-Control-Allow-Credentials</code> header in its response. Additionally, in this situation the server must explicitly specify the client’s origin in the <code>Access-Control-Allow-Origin</code> response header (that is, <code>*</code> is not allowed).</p></blockquote><p>这段说明直接指出了问题的根源，在跨域的请求中，携带凭证（在这里是cookie）存在CSRF攻击的风险，浏览器要求服务端除了需要设置<code>Access-Control-Allow-Credentials</code>为<code>true</code>，还需要设置<code>Access-Control-Allow-Origin</code>为客户端具体的host，不能设置为<code>*</code>。而我出现的问题就是因为设置了<code>*</code>导致。</p><h1 id="cookie的属性"><a href="#cookie的属性" class="headerlink" title="cookie的属性"></a>cookie的属性</h1><p>同时，文档还提到一个需要注意的地方</p><blockquote><p>Note that if a cookie’s SameSite attribute is set to Strict or Lax, then the cookie will not be sent cross-site, even if credentials is set to include.</p></blockquote><p>所以，即使我们设置好了<code>Access-Control-Allow-Origin</code>，还需要注意，不是所有的cookie都会被发送。只有cookie的<code>SameSite</code>属性设置为<code>None</code>，才会被发送。而<code>SameSite</code>属性设置为<code>None</code>，则需要设置<code>Secure</code>属性，表示该cookie只能在https协议下传输。<br>一般来说，chrome的cookie默认<code>SameSite</code>属性设置为<code>Lax</code>，因此，在这种场景下，还需要对想传输的cookie设置<code>SameSite=None</code>和<code>Secure</code>。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>跨域请求，如果想透传cookie，需要设置<code>Access-Control-Allow-Origin</code>为客户端具体的host，不能设置为<code>*</code>。</li><li>cookie的<code>SameSite</code>属性设置为<code>None</code>，才会被发送。而<code>SameSite</code>属性设置为<code>None</code>，则需要设置<code>Secure</code>属性，表示该cookie只能在https协议下传输。</li><li>另外，其实浏览器端做了这么多的限制，其实还是因为安全问题，那么对于业务A需要透传cookie到业务B，其实还是需要重新考虑业务的合理性。</li></ol><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">Fetch API</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">CORS</a></li></ul>]]></content>
    
    
    <summary type="html">日常踩坑，跨域传输cookie的关键点：需设置Access-Control-Allow-Origin为具体域名，配置SameSite=None和Secure属性，并强调了安全性问题。</summary>
    
    
    
    
    <category term="network" scheme="https://derycktse.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>JWT鉴权也能实现用户登出</title>
    <link href="https://derycktse.github.io/2025/03/30/2025/jwt-authentication-with-logout-capability/"/>
    <id>https://derycktse.github.io/2025/03/30/2025/jwt-authentication-with-logout-capability/</id>
    <published>2025-03-30T13:44:00.000Z</published>
    <updated>2025-03-30T14:48:58.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近在负责的一个后台系统，后台是使用IAM方式来进行用户登录管理的。<br>而在架构上，该系统使用了aws lambda, api gateway等serverless技术。</p><p>接口鉴权的流程大致如下:</p><ol><li>用户登录统一管理后台后，由服务端鉴权后下发一个JSON Web Token(后面简称JWT)储存于客户端cookie之中</li><li>每次前端调用接口服务时，将cookie的JWT携带上请求后端api(api gateway)</li><li>api gateway对于每一个请求，都有一个before action来校验JWT是否有效。如果检测有效，则放行，否则响应401，要求用户重新登录</li></ol><h2 id="鉴权流程图"><a href="#鉴权流程图" class="headerlink" title="鉴权流程图"></a>鉴权流程图</h2><pre class="mermaid">sequenceDiagram    actor Client as 客户端    participant Gateway as API Gateway    participant Auth as iam-authorizer    participant API as 业务API     Client->>Gateway: API 请求    Note over Client,Gateway: 携带 JWT Token    Gateway->>Auth: 触发认证    Note over Gateway,Auth: 校验 JWT    alt 用户需要重新认证        Auth-->>Gateway: 校验失败,返回 Deny 策略        Gateway-->>Client: 401 Unauthorized    else 用户状态正常        Auth-->>Gateway: 校验成功，返回 Allow 策略        Gateway->>API: 转发请求        API-->>Client: 正常响应    end</pre><p>说明: 这里仅为鉴权流程，不包含用户登录流程，登录流程是独立的，不依赖于鉴权流程</p><p>在这套鉴权机制下，有一个重要角色: <code>iam-authorizer</code>。它是一个lambda函数，负责校验用户请求header里的JWT是否有效。</p><ol><li>如果有效，则放行，让请求回源到后端的API接口</li><li>如果JWT失效或者过期，则响应401，让用户重新登录</li></ol><h1 id="JWT的缺陷"><a href="#JWT的缺陷" class="headerlink" title="JWT的缺陷"></a>JWT的缺陷</h1><p>使用JWT鉴权的方式，对比cookie-session的模式。有一个很明显的问题：对于下发出去的token，服务端并没有回收或者强制登出的能力。除非token的时间已经过期，否则会一直有效。服务端并不存储用户的session信息，是否有效只能由JWT本身来存储（除非服务端更换鉴权的secret）</p><p>这样子一来，就会有一个安全问题，如果用户客户端的token由于保管不妥善被盗取了，在过期前, token都被盗取者能使用。</p><h1 id="让服务端拥有强制用户登出的能力"><a href="#让服务端拥有强制用户登出的能力" class="headerlink" title="让服务端拥有强制用户登出的能力"></a>让服务端拥有强制用户登出的能力</h1><p>上面问题的核心在于：服务端对于某一个下发的token，没有能力去主动让其失效。<br>那么解决问题的突破点就是：让服务端能够识别具体一个token从而可以去让其失效。借鉴于cookie-session的会话机制，很容易想到，可以服务端保存用户的登录态，然后对登录态进行干涉。</p><h2 id="引入存储机制"><a href="#引入存储机制" class="headerlink" title="引入存储机制"></a>引入存储机制</h2><p>于是，在原来的基础上，引入了存储机制(见下图)。<code>iam-authorizer</code>为一个鉴权函数，原本它是需要校验jwt是否有效即可。现在它需要更多的责任，我做了如下改造：</p><ol><li>引入了存储服务：dynamoDB，用来管理用户的凭证信息</li><li><code>iam-authorizer</code>会通过解析JWT获取到用户id，并查询dynamoDB后，如果凭证(isExpired不为true)有效，则放行，否则让用户重新登录</li></ol><h2 id="DynamoDB的表结构"><a href="#DynamoDB的表结构" class="headerlink" title="DynamoDB的表结构"></a>DynamoDB的表结构</h2><table><thead><tr><th>字段名</th><th>字段类型</th><th>说明</th></tr></thead><tbody><tr><td>userId</td><td>String</td><td>用户的ID</td></tr><tr><td>sessionId</td><td>String</td><td>用户的sessionID</td></tr><tr><td>createdAt</td><td>Number</td><td>用户的登录时间</td></tr><tr><td>updatedAt</td><td>Number</td><td>用户的更新时间</td></tr><tr><td>isExpired</td><td>Boolean</td><td>用户的登录状态是否过期; 这个字段为本次流程关键，通过干涉这个字段，实现踢出用户</td></tr></tbody></table><h2 id="新鉴权流程"><a href="#新鉴权流程" class="headerlink" title="新鉴权流程"></a>新鉴权流程</h2><p>经过改在后，新的鉴权流程如下：</p><pre class="mermaid">sequenceDiagram    actor Client as 客户端    participant Gateway as API Gateway    participant Auth as iam-authorizer    participant DB as DynamoDB    participant API as 业务API     Client->>Gateway: API 请求    Note over Client,Gateway: 携带 JWT Token    Gateway->>Auth: 触发认证    Note over Auth: 验证 JWT    Auth->>DB: 查询状态    Note over DB: 查询 userId 状态是否允许访问    alt 用户需要重新认证        DB-->>Auth: 记录存在 且 状态为允许访问        Auth-->>Gateway: 返回 Deny 策略        Gateway-->>Client: http status 403 forbidden     else 用户状态正常        DB-->>Auth: 记录不存在 or 记录存在, 状态为不允许访问        Auth-->>Gateway: 返回 Allow 策略        Gateway->>API: 转发请求        API-->>Client: 正常响应    end</pre><p>这套机制比开始的机制不同的地方，是引入了存储机制。有了存储机制，问题就好办了，现在只需要干涉数据库里的用户登录状态，就可以让用户的token失效，从而实现强制登出，让用户需要重新登录。</p><h2 id="强制登出流程的订阅"><a href="#强制登出流程的订阅" class="headerlink" title="强制登出流程的订阅"></a>强制登出流程的订阅</h2><p>接下来对了IAM系统进行改造，如果用户登录，则IAM会进行一个登出事件的发布。对于所有的服务，只需要订阅这个登出时间，自行在自己的系统里，对用户踢掉下线。</p><p>在非serverless的架构下，如果按照常规的做法，我们需要一个常驻的服务来充当一个subscriber的角色，订阅登出事件并一直监听。</p><p>部署一个常驻的服务的成本很高。而我们的应用本身是一个serverless服务。这个时候其实我们更倾向于寻找更加轻便的做法。</p><p>我们观察到： 消息队列里，如果消息事件如果没有被消费或者订阅，是会堆积在队列里，等待订阅者消费。<br>那么，我们可以新增一个函数，作为一个监听者（<code>iam-monitor</code>）来监听队列。但是，每一分钟用户都可能在登出，队列随时会推送，那么我们如何保证消息消费的及时性呢？<br>通过调研，我们发现：</p><ol><li>aws lambda函数提供最长单个函数15min的执行生命周期 </li><li>通过设置定时任务(AWS CloudWatch EventBridge)，定期唤醒函数的形式，设置一定的频率，可以达到类似常驻服务的效果</li></ol><p>于是，我们马上设计了一个监听机制:</p><ol><li>新增一个监听的角色<code>iam-monitor</code>，负责监听用户登出事件</li><li>如果监听到用户登出，那么<code>iam-monitor</code>会执行处理函数（<code>iam-handler</code>），对于登出的用户，在db里将用户的登录状态设置为登出（这样鉴权函数就会识别用户无法登录系统从而让用户重新登录了） </li><li>通过定时任务，每15min 执行一遍<code>iam-monitor</code>, 从而达到无缝监听用户登出的效果</li></ol><p>登出的流程图如下：</p><pre class="mermaid">sequenceDiagram    actor User as 用户    participant MessagePublisher as MessagePublisher    participant Monitor as iam-monitor    participant Handler as iam-handler    participant DB as DynamoDB    User->>MessagePublisher: 触发登出    Note over MessagePublisher: 某个用户的登出事件    MessagePublisher->>Monitor: 发送事件    Note over Monitor: 提取 userId    Monitor->>Handler: 调用 Lambda    Note over Handler: 将用户状态设置为登出    Handler->>DB: 写入用户状态记录    Note over DB: 修改后DB里用户的状态登出状态</pre><h2 id="完整鉴权流程"><a href="#完整鉴权流程" class="headerlink" title="完整鉴权流程"></a>完整鉴权流程</h2><p>至此，后台完整鉴权流程图如下</p><pre class="mermaid">graph TB    subgraph 用户操作        User[用户] --> APICall[API调用]        User[用户] --> Logout[登出操作]    end    subgraph 消息队列        Logout --> MessagePublisher[MessagePublisher]    end    subgraph API服务        APICall --> Gateway[API Gateway]        Gateway -.-> API[API服务]    end    subgraph Lambda函数        Gateway --> Auth[iam-authorizer]        MessagePublisher --> Monitor[iam-monitor]         Monitor --> Handler[iam-handler]        Auth --> API[API服务]    end    subgraph 数据存储        Handler --> DB[(DynamoDB)]        Auth --> DB    end    %% 样式定义    classDef default fill:#f9f,stroke:#333,stroke-width:2px;    classDef lambda fill:#ff9,stroke:#333,stroke-width:2px;    classDef storage fill:#9f9,stroke:#333,stroke-width:2px;    classDef event fill:#99f,stroke:#333,stroke-width:2px;    class Monitor,Handler,Auth lambda;    class DB, storage;    class Logout,APICall event;</pre><p>至此，一个完整的登出流程就设计出来了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>JWT本身是无状态，但是我们可以通过引入存储的形式。实现对用户态是否有效的干预</li><li>pub&#x2F;sub模式，subscriber并不一定需要是一个常驻的服务，只需要定期消费队列的日志即可</li></ol>]]></content>
    
    
    <summary type="html">本文介绍了使用 JWT鉴权的后台系统，如何实现登出功能。通过引入存储机制，IAM服务端可以对用户的token进行干预，实现强制登出。</summary>
    
    
    
    
    <category term="AWS" scheme="https://derycktse.github.io/tags/aws/"/>
    
    <category term="Serverless" scheme="https://derycktse.github.io/tags/serverless/"/>
    
  </entry>
  
  <entry>
    <title>记2024-09-21日游深圳塘朗山</title>
    <link href="https://derycktse.github.io/2024/09/22/2024/a-day-trip-to-tanglang-mountain-in-shenzhen/"/>
    <id>https://derycktse.github.io/2024/09/22/2024/a-day-trip-to-tanglang-mountain-in-shenzhen/</id>
    <published>2024-09-22T14:06:00.000Z</published>
    <updated>2025-03-30T14:48:58.045Z</updated>
    
    <content type="html"><![CDATA[<p>周六日起了个早（也不算早了，七点半起来），决定爬一下塘朗山。吃完早餐开车到山脚下已经快接近9点了，放眼望过去没停车位，于是绕远找了个车位停下来开始登山。<br><img src="https://github.com/user-attachments/assets/553bbd50-d0df-4fb5-baa0-7b1bd484d8c4" alt="IMG_7880"></p><p>进了公园之后可以选择走阶梯或者是平道。</p><p><img src="https://github.com/user-attachments/assets/b9737a71-b9a2-4e6f-bd69-8d6dc4713388" alt="IMG_7853"><br>考虑到楼梯可能会比较费劲儿，以前也爬过，这一次决定走走平道。不过走平道的话，迂回上山，时间就会花得比较久。不过沿途隔一阵子就有亭子可以歇息喝口水拍个照</p><p><img src="https://github.com/user-attachments/assets/e6b829f3-1c86-400a-8e63-f9df4f52f5fc" alt="IMG_7855"></p><p>我们以非常慢的节奏走走歇歇，2个小时登顶，一点儿也不累。不过快到山上时雨势渐渐变大。<br><img src="https://github.com/user-attachments/assets/429adf78-acf3-4341-ba08-263ecab70876" alt="IMG_7870"></p><p>到了4km就接近登顶了。</p><p>来到百尺天梯的时候，雨已经开始感觉越下越大，不过想来都来了，于是还是撑伞上去。<br><img src="https://github.com/user-attachments/assets/7690b7b4-ca66-41f8-aa7c-db21de3aa661" alt="IMG_7857"></p><p>百尺天梯，本次爬山为数不多的台阶。<br><img src="https://github.com/user-attachments/assets/2e15a60c-54d8-4f97-8bb4-61c0d7ca20ea" alt="IMG_7858"></p><p>穿过了百尺天梯之后就算是真正登顶了。<br><img src="https://github.com/user-attachments/assets/7f9c61c1-88f1-4de8-bd64-384587d59089" alt="IMG_7866"></p><p>山上还是挺多人的，大家都在避雨休息，有的人甚至还带上了自热火锅。</p><p>从山上看上去，远处一片全是水雾蒙蒙。<br><img src="https://github.com/user-attachments/assets/50415554-84e2-42b0-9c40-17dd3bc58009" alt="IMG_7862"></p><p>在山上休息了十几分钟，眼看雨没有停下的意思，于是决定撑伞回程。结果真的雨下下停停直到下山，衣服和鞋都已经湿透了。</p><p><img src="https://github.com/user-attachments/assets/9de349a3-947e-4b03-b6ed-b4d09cc914a5" alt="IMG_7878"></p><p>下雨的道路别有一番感觉，人也渐渐少了。一路感觉湿气非常重。</p><p><img src="https://github.com/user-attachments/assets/6ecc4f3b-f311-4f0c-84b4-cbcb29282ff0" alt="IMG_7873"></p><p>之前天气晴朗的时候来爬过几次，也没看见猴子。没想到在这个雨天看见了猴群，它们就在雨中攀在树枝上，凝望着游客。<br><img src="https://github.com/user-attachments/assets/cc39d91a-71cc-4b0a-9a06-9989f7257919" alt="IMG_7894"></p><p>下雨的缘故，路边的野花也显得格外鲜艳。<br><img src="https://github.com/user-attachments/assets/c43b0fc7-f1b9-4ff1-a5d9-1edccbc1d108" alt="IMG_7879"></p><p>走平道上下山全程下来大约在9km，因为我车停的远的缘故，估计多走了快2km.<br><img src="https://github.com/user-attachments/assets/25f28300-1af4-4d01-a536-e4049888e711" alt="Sat, Sep 21"></p>]]></content>
    
    
    <summary type="html">深圳塘朗山游记</summary>
    
    
    
    
    <category term="生活记事" scheme="https://derycktse.github.io/tags/%E7%94%9F%E6%B4%BB%E8%AE%B0%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>记网站静态资源国内区域回源海外被墙及解决方式</title>
    <link href="https://derycktse.github.io/2024/09/08/2024/china-website-static-resources-blocked-solutions/"/>
    <id>https://derycktse.github.io/2024/09/08/2024/china-website-static-resources-blocked-solutions/</id>
    <published>2024-09-08T06:59:26.000Z</published>
    <updated>2025-03-30T03:23:45.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>目前管理的一个网站，主要用户群体是北美，欧洲，与中国地区。早之前选用的云服务商的亚马逊。静态资源原链路大概如下（从左往右）：</p><table><thead><tr><th>区域</th><th>CDN</th><th>源站</th></tr></thead><tbody><tr><td>全球用户</td><td>AWS CloudFront</td><td>S3</td></tr></tbody></table><p>但是通过监控来看中国区用户访问速度并不太理想。关于CDN的节点，我们看看</p><h1 id="CloudFront各州节点情况"><a href="#CloudFront各州节点情况" class="headerlink" title="CloudFront各州节点情况"></a>CloudFront各州节点情况</h1><h2 id="北美区"><a href="#北美区" class="headerlink" title="北美区"></a>北美区</h2><p><img src="https://github.com/user-attachments/assets/9a79fce3-5976-4d9b-a334-b95649ce4cb9" alt="cloudfront 北美节点数"></p><h2 id="欧洲区"><a href="#欧洲区" class="headerlink" title="欧洲区"></a>欧洲区</h2><p><img src="https://github.com/user-attachments/assets/1d6da487-b167-448c-84b0-93acd284036a" alt="CloudFront 欧洲区节点"></p><h2 id="亚太区"><a href="#亚太区" class="headerlink" title="亚太区"></a>亚太区</h2><p><img src="https://github.com/user-attachments/assets/cf9ed303-7e40-47b0-af01-d0fd182a3a54" alt="CloudFront 亚洲区节点"></p><p>AWS主营业务在海外，中国区只有深圳、香港、北京、台北桃园、中卫几个节点。所以中国区的用户，静态资源下载的速度并不十分理想</p><h1 id="优化链路-增加中国区云服务商"><a href="#优化链路-增加中国区云服务商" class="headerlink" title="优化链路 - 增加中国区云服务商"></a>优化链路 - 增加中国区云服务商</h1><p>在国内的CDN，增加了阿里云云服务托管，并且选用了阿里云的对象存储，于是访问链路变成（从左往右）</p><table><thead><tr><th>区域</th><th>CDN</th><th>源站</th></tr></thead><tbody><tr><td>中国用户</td><td>阿里云CDN</td><td>阿里云对象存储（OSS）</td></tr><tr><td>全球用户</td><td>AWS CloudFront</td><td>AWS S3</td></tr></tbody></table><p>由于阿里云在中国区的节点数量多，于是国内用户访问的速度就快了一个档次。</p><h1 id="新问题-中国区访问资源偶尔失败"><a href="#新问题-中国区访问资源偶尔失败" class="headerlink" title="新问题 - 中国区访问资源偶尔失败"></a>新问题 - 中国区访问资源偶尔失败</h1><p>近期出现新上传的资源, 中国地区的用户访问失败</p><p><img src="https://github.com/user-attachments/assets/2f4d7ca2-4459-4923-b528-31e5d09a783e" alt="resource error"></p><p>通过上面的信息初步可以推断出来是国内回源出现了问题。实际上，我们的静态资源链路拓扑图是这样的：</p><p><img src="https://github.com/user-attachments/assets/7cdf801d-f286-4d45-b2f9-722eda3902af" alt="站点拓扑图"></p><p>中国区的架构是后面才新增的，原本的运营后台传输资源只是会上传在海外服务。<br>所以对于中国区的服务，配置的策略是：如果国内OSS没有资源，则会回源到海外去获取资源再缓存。</p><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>本次出问题就出在红色的线路，海外回源的策略上。<br>阿里云OSS使用aws cloudfront的提供的默认CDN域名作为回源(xxx.cloudfront.com), 由于 *.cloudfront.com 相关域名会被一些中国区认定灰产的内容所引用，所以xxx.cloudfront相关的域名容易被墙。</p><h1 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h1><p>知道问题之后就好办了，有两种方式可以解决</p><h2 id="方式一：中国区回源海外域名备案"><a href="#方式一：中国区回源海外域名备案" class="headerlink" title="方式一：中国区回源海外域名备案"></a>方式一：中国区回源海外域名备案</h2><p>更换一个中国区备案的域名，用来做回源使用。<br>次解决方案，而且可以通过OSS资源预热的形式，让资源主动进入OSS里面缓存，如果网络抖动也可以通过增加重试的形式，基本能成功。</p><p><img src="https://github.com/user-attachments/assets/cc70d18f-3600-4995-acdf-7b2302947e20" alt="image"></p><h2 id="方式二-主动写入中国区"><a href="#方式二-主动写入中国区" class="headerlink" title="方式二: 主动写入中国区"></a>方式二: 主动写入中国区</h2><p>用回源的方式一个问题为，国内的资源是采取被动的形式才生成的。那么可以采取主动写入的形式。即：同时往中国区写入内容。这个要求我们写入的服务访问中国以及海外的网络都稳定。所以，一个比较理想的部署方式是，运营后台迁移到香港地区。如此网站的拓扑变成：</p><p><img src="https://github.com/user-attachments/assets/9dee2979-ddbb-4d2f-8d64-fcf0de62851d" alt="image"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>稳定性方面，方案二要比方案一稳定得多。因为方案一采取被动加重试来进行稳定保障，而方案二是主动掌握稳定性。<br>但是结合成本上来说，方案一只需要简单变更，而且不涉及链路调整，仅仅是修改回源别名。简单有效，所以本次解决被墙的问题采用了方案一，最终墙的问题顺利解决。</p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ul><li><a href="https://aws.amazon.com/cloudfront/features/?nc1=h_ls&whats-new-cloudfront.sort-by=item.additionalFields.postDateTime&whats-new-cloudfront.sort-order=desc">Amazon CloudFront Key Features</a></li></ul>]]></content>
    
    
    <summary type="html">本文记录了在网站多区域部署的情况下，中国区的静态资源回源到海外区失败以及解决方式</summary>
    
    
    
    
    <category term="架构设计" scheme="https://derycktse.github.io/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>使用AWS SDK操作阿里云OSS</title>
    <link href="https://derycktse.github.io/2024/08/17/2024/use-aws-sdk-to-operate-aliyun-oss/"/>
    <id>https://derycktse.github.io/2024/08/17/2024/use-aws-sdk-to-operate-aliyun-oss/</id>
    <published>2024-08-17T03:21:04.000Z</published>
    <updated>2025-03-30T03:23:45.237Z</updated>
    
    <content type="html"><![CDATA[<p>在架构设计上，一些容灾做的比较好的网站可能会采用多区域部署。</p><p>有的服务采用同一个云服务商的不同区域的服务。而有一些解决方案，在综合可用性，费用等实际情况考量下，可能会选用不同的云服务商。</p><p>在实际实践中，我就遇到了不同区域选用不同的云服务商的场景: 网站使用对象存储来管理。海外使用的云服务商是AWS, 中国区域使用的是阿里云。<br>两家云服务商分别有自己的对象存储服务，分别是：aws s3 与 阿里云OSS。</p><table><thead><tr><th>区域</th><th>云服务商</th><th>对象存储服务</th></tr></thead><tbody><tr><td>中国区</td><td>阿里云</td><td><a href="https://www.aliyun.com/product/oss">OSS</a></td></tr><tr><td>海外区</td><td>亚马逊</td><td><a href="https://aws.amazon.com/s3/">S3</a></td></tr></tbody></table><p><img src="https://github.com/user-attachments/assets/c8da10a4-1369-41cb-b153-339c098362b6" alt="image"></p><p>在代码实现上，我们往往需要同时引入aws跟aliyun 对象存储的sdk。<br>部署在海外的服务，上传文件到s3。部署在国内的服务，上传文件到阿里云oss。</p><p>所以，在服务里，往往需要同时引用双方的SDK，并针对性进行内容上传。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">AWS</span> = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">OSS</span> = <span class="built_in">require</span>(<span class="string">&#x27;ali-oss&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是海外，则操作AWS S3, 否则使用阿里云 SS</span></span><br><span class="line"><span class="keyword">if</span> (isOversea) &#123;</span><br><span class="line">  <span class="keyword">const</span> s3 = <span class="keyword">new</span> <span class="variable constant_">AWS</span>.<span class="title function_">S3</span>();</span><br><span class="line">  <span class="keyword">const</span> params = &#123;</span><br><span class="line">    <span class="title class_">Bucket</span>: bucket,</span><br><span class="line">    <span class="title class_">Key</span>: key,</span><br><span class="line">    <span class="title class_">Body</span>: file,</span><br><span class="line">  &#125;;</span><br><span class="line">  s3.<span class="title function_">upload</span>(params, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;upload failed!&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">resolve</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> client = <span class="keyword">new</span> <span class="title function_">OSS</span>(&#123;</span><br><span class="line">    <span class="string">&quot;region&quot;</span>: <span class="string">&quot;oss-cn-hangzhou&quot;</span>,</span><br><span class="line">    <span class="string">&quot;accessKeyId&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;accessKeySecret&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bucket&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  client.<span class="title function_">put</span>(key, file)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">resolve</span>()</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">ex</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>, ex)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最近在做功能对接的时候，阅读阿里云官方文档，发现阿里云官方声明支持使用aws的sdk进行操作oss。</p><blockquote><p>对象存储OSS提供了兼容Amazon S3的API。当您将数据从Amazon S3迁移到OSS后，只需简单的配置修改，即可让您的客户端应用轻松兼容OSS服务。本文主要介绍如何通过不同开发平台的S3 SDK完成初始化配置，然后使用S3 SDK接口访问OSS资源。</p></blockquote><p>需要将上传的<code>endpoint</code>进行调整即可，阿里云已经在数据层面对AWS的SDK进行了兼容。</p><h1 id="代码同构"><a href="#代码同构" class="headerlink" title="代码同构"></a>代码同构</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">AWS</span> = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">AWS</span>.<span class="property">config</span>.<span class="title function_">update</span>(&#123;</span><br><span class="line">    <span class="attr">accessKeyId</span>: <span class="string">&quot;OSS_AccessKeyId&quot;</span>,</span><br><span class="line">    <span class="attr">secretAccessKey</span>: <span class="string">&quot;OSS_AccessKeySecret&quot;</span>,</span><br><span class="line">    <span class="attr">region</span>: <span class="string">&quot;oss-cn-hangzhou&quot;</span>,</span><br><span class="line">    <span class="attr">endpoint</span>: <span class="string">&#x27;https://oss-cn-hangzhou.aliyuncs.com&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">s3 = <span class="keyword">new</span> <span class="variable constant_">AWS</span>.<span class="title function_">S3</span>(&#123;<span class="attr">apiVersion</span>: <span class="string">&#x27;2006-03-01&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure><h1 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h1><p>使用此种代码同构的方式，在测试过程中出现了异常。<br>这个异常出现的场景：如果同一个应用，同时操作S3与OSS，就会出现操作对象存储失败。<br>原因则是因为，使用构建函数的配置update enpoint的方式, 会切换所有对象存储的<code>endpoint</code> , 结果让数据要么统一到aws, 要么统一到阿里云</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">AWS</span>.<span class="property">config</span>.<span class="title function_">update</span>(&#123;</span><br><span class="line">    <span class="attr">accessKeyId</span>: <span class="string">&quot;OSS_AccessKeyId&quot;</span>,</span><br><span class="line">    <span class="attr">secretAccessKey</span>: <span class="string">&quot;OSS_AccessKeySecret&quot;</span>,</span><br><span class="line">    <span class="attr">region</span>: <span class="string">&quot;oss-cn-hangzhou&quot;</span>,</span><br><span class="line">    <span class="attr">endpoint</span>: <span class="string">&#x27;https://oss-cn-hangzhou.aliyuncs.com&#x27;</span>,  <span class="comment">// 出现问题的地方</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>在AWS SDK的文档可以看到，S3的客户端支持实例化的方式，只需要在实例的时候，针对实例进行初始化配置即可。即<strong>使用工厂模式而非单例模式</strong><br>重新调整代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">AWS</span> = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 针对性传入aliyun 或者 aws的配置，如果有多个客户端，那就初始化多个实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> initConfiguration = &#123;</span><br><span class="line">  <span class="attr">apiVersion</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">accessKeyId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">accessKeySecret</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">region</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">endpoint</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每次初始化一个实例并指定endpoint.</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">client</span> = <span class="keyword">new</span> <span class="variable constant_">AWS</span>.<span class="title function_">S3</span>(&#123;</span><br><span class="line">  <span class="attr">apiVersion</span>: initConfiguration.<span class="property">apiVersion</span>,</span><br><span class="line">  <span class="attr">accessKeyId</span>: initConfiguration.<span class="property">accessKeyId</span>,</span><br><span class="line">  <span class="attr">secretAccessKey</span>: initConfiguration.<span class="property">accessKeySecret</span>,</span><br><span class="line">  <span class="attr">region</span>: initConfiguration.<span class="property">region</span>,</span><br><span class="line">  <span class="attr">endpoint</span>: initConfiguration.<span class="property">endpoint</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如此一份兼容S3 与 OSS的 代码片段便大功告成了</p><p>横向对比可以发现，现在业界许多对象存储，除了阿里云OSS，腾讯云COS，同样都能使用 AWS 的SDK来操作他们的对象存储，因为他们都遵循AWS的 Simple Storage Service规范。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.alibabacloud.com/help/zh/oss/developer-reference/use-amazon-s3-sdks-to-access-oss#section-2ri-suq-pb3">使用Amazon S3 SDK访问OSS</a></li><li><a href="https://cloud.tencent.com/document/product/436/37421">使用 AWS S3 SDK 访问 COS</a></li></ul>]]></content>
    
    
    <summary type="html">本文介绍如何使用AWS SDK操作阿里云OSS，通过兼容API简化跨云存储管理，以实现高效的对象存储。</summary>
    
    
    
    
    <category term="AWS" scheme="https://derycktse.github.io/tags/aws/"/>
    
    <category term="对象存储" scheme="https://derycktse.github.io/tags/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>网站多区域部署的解析方案</title>
    <link href="https://derycktse.github.io/2024/08/10/2024/website-multi-region-deploy-resolve-solution/"/>
    <id>https://derycktse.github.io/2024/08/10/2024/website-multi-region-deploy-resolve-solution/</id>
    <published>2024-08-10T09:04:08.000Z</published>
    <updated>2025-03-30T03:23:45.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景与目的"><a href="#背景与目的" class="headerlink" title="背景与目的"></a>背景与目的</h1><p>作为网站管理员，如果管理的网站发展到了一定的规模，多区域部署是会面临的一个问题。常见部署方式为中国区域部署一套，海外部署一套。</p><p>为什么网站需要多个部署？</p><ol><li>安全合规：不同国家和地区可能有不同的数据保护法规和隐私政策。多区域部署可以帮助企业遵守当地法律法规，例如，某些法规要</li><li>个性化：多区域部署可以帮助企业更好地满足不同地区用户的需求，提供定制化的内容和服务。</li><li>灾备：如果一个区域出现故障，可以快速切换到另外一个区域的服务</li><li>提升访问速度：将用户流量导入到较近的区域有助于提升响应的速度。</li></ol><p>如果服务部署了多个地区，那么如何让用户能够访问到我们希望他们去访问的区域呢？</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="多个域名解决方案"><a href="#多个域名解决方案" class="headerlink" title="多个域名解决方案"></a>多个域名解决方案</h2><p>这种情况比较常见，且比较直观，通过浏览器的URL就能区分。拿三星官网来举例。<br>输入 <code>https://www.samsung.com</code>。<br><img src="https://github.com/user-attachments/assets/dc65dd1c-e1c6-42d1-aea9-df53e161692c" alt="image"><br>最终三星的服务器将我的页面跳到香港繁体中文的首页。地址栏显示: <code>https://www.samsung.com/hk/</code>, 可以看到服务器的ip位于香港🇭🇰（因为我在深圳，所以可能海外最近的节点是在香港）。</p><p>这个时候如果切换到中文：<br><img src="https://github.com/user-attachments/assets/9e278bad-669f-437f-addd-2afee3eb1b5e" alt="image"></p><p>可以看到最终响应域名的是 <code>https://www.samsung.com.cn/</code>, 而且左下角可以看到服务器是来自于中国🇨🇳。</p><p>这就是一种典型的多域名部署方案。</p><h2 id="同域名解决方案"><a href="#同域名解决方案" class="headerlink" title="同域名解决方案"></a>同域名解决方案</h2><p>多个域名的情况下，管理员需要去投入更多维护成本。有的网站会采用同个域名但是对于不同地区的用户，访问到不同部署服务。</p><p>以前有一个很经典的面试题：<strong>浏览器输入URL之后回车，会发生什么</strong>， 其中最重要的一个环节就是DNS解析。</p><h3 id="DNS是什么"><a href="#DNS是什么" class="headerlink" title="DNS是什么"></a>DNS是什么</h3><blockquote><p>DNS（域名系统，Domain Name System）是互联网的一项核心服务，它负责将人类可读的域名（如 <code>www.example.com</code>）转换为机器可读的IP地址（如 <code>192.0.2.1</code>）。DNS使用分布式数据库和层次化的设计，允许用户通过域名访问网站，而不需要记住复杂的数字IP地址。<br>当用户在浏览器中输入一个网址时，浏览器会向DNS服务器发送查询请求。DNS服务器会查找与该域名对应的IP地址，并将其返回给浏览器，然后浏览器使用这个IP地址与目标服务器建立连接，从而加载用户请求的网页。</p></blockquote><h3 id="基于地理位置的DNS解析"><a href="#基于地理位置的DNS解析" class="headerlink" title="基于地理位置的DNS解析"></a>基于地理位置的DNS解析</h3><p>对于同个域名，在中国地区的用户，我们可以让DNS解析到中国服务，而海外的用户，我们可以解析到海外服务。假设我们的管理域名如下</p><table><thead><tr><th>域名</th><th>说明</th></tr></thead><tbody><tr><td><a href="http://www.example.com/">www.example.com</a></td><td>希望用户统一访问的域名</td></tr><tr><td><a href="http://www.cn-example.com/">www.cn-example.com</a></td><td>希望中国地区用户访问到的服务</td></tr><tr><td><a href="http://www.global-example.com/">www.global-example.com</a></td><td>希望非中国地区用户访问到的服务</td></tr></tbody></table><p>现在云厂商很多都提供了基于地理位置的DNS解析，我们拿<a href="https://aws.amazon.com/route53/">AWS route53</a>服务来举例。</p><p><img src="https://github.com/user-attachments/assets/b63f7e47-35e0-44b3-849e-a9dd8298f497" alt="image"></p><p>可以看到，对于 <code>www.example.com</code> 这个域名，我们新建两条了DNS解析记录。注意，这里我们选择的<strong>route policy为基于地理位置的解析</strong>： 记CN的用户，解析到<code>www.cn-example.com</code>, 而其他用户则解析到<code>www.global-example.com</code>。<br>注：上面我们使用了<code>cname record type</code>，如果服务没有域名，我们可以用DNS <code>A record type</code>。</p><p>如此，对于用户来说，只需要知道一个域名即可，而对于网站管理员来说，不同地域的用户，则会访问到不同的部署服务。</p>]]></content>
    
    
    <summary type="html">本文介绍为了满足安全合规与个性化需求，提升用户访问速度和可靠性，网站采取多个区域部署的DNS解析方案</summary>
    
    
    
    
    <category term="架构设计" scheme="https://derycktse.github.io/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>使用cubox作为我的主力阅读软件</title>
    <link href="https://derycktse.github.io/2024/07/31/2024/use-cubox-as-my-read-it-later-tool/"/>
    <id>https://derycktse.github.io/2024/07/31/2024/use-cubox-as-my-read-it-later-tool/</id>
    <published>2024-07-31T14:00:00.000Z</published>
    <updated>2025-03-30T03:23:45.238Z</updated>
    
    <content type="html"><![CDATA[<p>最近用上了 Cubox 作为我的主力read-it-later 软件。在这之前，我用过的read-it-later 软件主要有这么几款：</p><ol><li>instapaper: 交互不是很符合我的习惯，放弃。</li><li>omnivore: 作为一款开源的免费软件，还提供了独立部署的方案，其实很不错了。但是UI 和一些使用场景，怎么都用起来感觉差那么点。</li><li>readwise reader: 非常优秀，最大缺点就是贵。</li></ol><p>当然了，目前这一类工具都拓展了其他的功能，已经演变成一些深度阅读学习工具。不过，就本质的需求来说，我仅仅是希望有一个比较称心的read it later 与 文章收藏工具。</p><h1 id="一些Cubox我比较依赖的功能"><a href="#一些Cubox我比较依赖的功能" class="headerlink" title="一些Cubox我比较依赖的功能"></a>一些Cubox我比较依赖的功能</h1><p>作为一款read it later软件，我觉得cubox还是不错的。read it later 软件本质就是收藏，过后稍后阅读。所以，方便 &amp; 体验好是我看重的比较核心的指标。<br>以下简单讲讲一些Cubox比较好的地方，一些没有深度用到的功能就不展开说了。</p><h2 id="收录方便，与微信生态兼容良好"><a href="#收录方便，与微信生态兼容良好" class="headerlink" title="收录方便，与微信生态兼容良好"></a>收录方便，与微信生态兼容良好</h2><p>安装了浏览器插件之后，在平时浏览页面的过程中，遇到好的文章可以很方便就一键收录，过后再去阅读即可。<br>微信公众号是我一个很重要的阅读来源之一，付费版的cubox支持一键转发给cubox助手后直接收藏，这点深得我心。使用方法如下：</p><ol><li>添加 cubox 收藏助手为好友</li><li>在微信中将内容发送给「Cubox 收藏助手」即可完成收藏。</li></ol><p><img src="https://github.com/user-attachments/assets/1dc5fe12-450d-435c-ab3b-3249c729a15e" alt="collect_wechat_2"></p><p>可直接转发或手动输入以发送。收藏的内容将默认保存在「收集箱」列表。<br>收藏成功不会有提示消息，无需担心，通常并非收藏失败，收藏的内容需要稍等片刻才会出现在你的 Cubox 中。</p><ul><li>目前支持收藏：链接、公众号文章、图片、文本、视频、语音、文件。</li><li>暂不支持收藏：小程序、视频号、地理位置等特殊内容，以及超出体积限制的文件。</li></ul><h2 id="文件夹-与-书签"><a href="#文件夹-与-书签" class="headerlink" title="文件夹 与 书签"></a>文件夹 与 书签</h2><p>书签功能不需要多讲，Cubox 文件夹支持多重嵌套（付费版才支持），这点对我的个人习惯来说，还是蛮有用的。<br><img width="345" alt="image" src="https://github.com/user-attachments/assets/3c6a2b0a-a6eb-4abe-9f0e-a228da4c0dee"></p><h2 id="集成AI，生成文章摘要"><a href="#集成AI，生成文章摘要" class="headerlink" title="集成AI，生成文章摘要"></a>集成AI，生成文章摘要</h2><p>这个功能需要付费版，如果文章解析成功，可以使用AI生成摘要，浏览大纲。遇到一些比较晦涩的段落，还可以划线让AI解释。</p><img width="374" alt="image" src="https://github.com/user-attachments/assets/e1df6071-0342-4aa5-a482-6fbd54c91574"><img width="885" alt="image" src="https://github.com/user-attachments/assets/cb695406-a9c7-4a55-81f7-afb3810580e5"><h2 id="字体排版"><a href="#字体排版" class="headerlink" title="字体排版"></a>字体排版</h2><p>相比其他的软件，cubox 可以设置自由的可读区域与字体大小，行距等。<br>目前我中文阅读还是挺多的, 在这里推荐一款开源的不错的中文字体：<a href="https://github.com/lxgw/LxgwWenKai?tab=readme-ov-file">霞鹜文楷</a><br>现在我的cubox 和obsidian都引入了这款字体。换了这个字体后，我的阅读时间与写作的时间有了提高。毕竟看一款赏心悦目的字体，心情也是挺愉悦的。</p><p><img src="https://github.com/user-attachments/assets/ba89fad5-0d60-4a67-8265-88153d5f36d1" alt="字体展示"></p><h2 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h2><p>read it later 软件里, 有一些软件，图片引用的是源站链接。如果图片被设置防盗链的话，就看不了图了。<br>cubox 在这方面处理的还不错，不过尚不清楚原理是在它们的服务里缓存了图片，还是直接做了一层图片访问代理。从结果来看，图片显示的效果还是不错的。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>各方面综合起来, cubox虽然不是最优秀，但是目前来说，还是最适合我的使用习惯。当然了，目前使用起来，个人还是感觉有许多不足的。</p><ol><li>快捷键。我习惯在PC端使用，但是看了一下，cubox内置的快捷键还是挺少的。</li><li>pdf &amp; epub 等支持，这个readwise reader独一档，还支持进度记录。</li><li>国内外问题，因为公众号原因，我使用了国内版cubox, 这样一来微信公众号可以兼容得很好，但是twitter内容体验一塌糊涂，据说海外版是反过来的。</li></ol><h1 id="邀请注册"><a href="#邀请注册" class="headerlink" title="邀请注册"></a>邀请注册</h1><p>如果你没用过cubox的话，推荐你注册试用一下，在设置里面可以使用我的邀请码<code>wgE1r2qzo</code>, 这样我们都能验证7天的会员. 不确定国内海外版是否邀请互通，建议使用下面链接登录。</p><blockquote><p>你的私人阅读学习岛屿: <a href="https://cubox.pro/">https://cubox.pro</a>（下载或注册 Cubox 输入推荐码 wgE1r2qzo 领取 7 天会员）</p></blockquote><p>操作步骤:</p><ol><li>在 <a href="https://cubox.pro/">https://cubox.pro</a> 注册登录</li><li>设置 -&gt; 会员奖励，填入我的邀请码<code>wgE1r2qzo</code> 即可</li></ol><p><img src="https://github.com/user-attachments/assets/a416d712-7403-4f1c-8b24-bccfd6ef172a" alt="image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近用上了 Cubox 作为我的主力read-it-later 软件。在这之前，我用过的read-it-later 软件主要有这么几款：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;instapaper: 交互不是很符合我的习惯，放弃。&lt;/li&gt;
&lt;li&gt;omnivore: 作为一款开源的免</summary>
      
    
    
    
    
    <category term="效率提升" scheme="https://derycktse.github.io/tags/%E6%95%88%E7%8E%87%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>使用Google Analytics</title>
    <link href="https://derycktse.github.io/2024/07/28/2024/use-google-analytics/"/>
    <id>https://derycktse.github.io/2024/07/28/2024/use-google-analytics/</id>
    <published>2024-07-28T13:58:00.000Z</published>
    <updated>2025-03-30T03:23:45.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Google-Analytics"><a href="#Google-Analytics" class="headerlink" title="Google Analytics"></a>Google Analytics</h1><p>目前市场流量分析工具，Google Analytics的占有为全球第一<br>2024年7月开始，Google Universal Analytics开始全面停用，所有服务切换到了GA4。</p><blockquote><p><strong>紧急通知：</strong> 自 2024 年 7 月 1 日起，您将无法通过界面&#x2F;API 以及任何产品集成功能（例如 Google Ads 或 Search Ads 360）访问 Universal Analytics 数据。如果您尚未完成迁移，请通过<a href="https://support.google.com/analytics/answer/10110290">设置助理</a> 开始使用 Google Analytics 4 (GA4)。如果您想要继续访问媒体资源中的数据，则应立即<a href="https://support.google.com/analytics/answer/11583528#export&zippy=%2Chow-can-i-export-data-from-my-universal-analytics-property">下载自己的数据</a> 。</p></blockquote><h2 id="Google-Analytics-4"><a href="#Google-Analytics-4" class="headerlink" title="Google Analytics 4"></a>Google Analytics 4</h2><p> Google Analytics 4，即GA4，为GA的第4个版本。</p><h2 id="Google-Analytics-的各个版本"><a href="#Google-Analytics-的各个版本" class="headerlink" title="Google Analytics 的各个版本"></a>Google Analytics 的各个版本</h2><p>严格来说，并没有一个被正式称为 “GA3” 的版本。Google Analytics 的版本命名并不是按照数字顺序进行的，但我们可以根据其发展历程来理解不同版本的演变。</p><ol><li>Urchin：<ul><li>Google Analytics 的前身是 Urchin，Google 在2005年收购了 Urchin Software Corporation，并基于其技术推出了 Google Analytics。</li></ul></li><li>Classic Google Analytics (GA1)：<ul><li>这是 Google Analytics 的第一个版本，使用了 Urchin Tracking Module (UTM) 代码进行数据收集。</li></ul></li><li>Universal Analytics (GA2)：<ul><li>2012年，Google 推出了 Universal Analytics，这是一个重大升级，采用了新的数据模型和跟踪代码（analytics.js），并引入了许多新功能，如跨设备跟踪和更灵活的数据收集。</li></ul></li><li>Google Analytics 4 (GA4)：<ul><li>2020年，Google 推出了 Google Analytics 4，这是一个全新的版本，采用了基于事件的数据模型，旨在更好地支持跨平台（网站和应用）跟踪和分析。<br>说明:</li></ul></li><li>Google 并没有正式使用 “GA3” 这个名称。Universal Analytics 通常被视为 Google Analytics 的第二个主要版本（GA2），而 GA4 则是第三个主要版本。</li></ol><h1 id="接入方式"><a href="#接入方式" class="headerlink" title="接入方式"></a>接入方式</h1><p>GA4 接入方式有两种：</p><ol><li>gtag.js</li><li>使用Google Tag Manager</li></ol><h1 id="Global-Site-Tag-gtag-js"><a href="#Global-Site-Tag-gtag-js" class="headerlink" title="Global Site Tag (gtag.js)"></a>Global Site Tag (gtag.js)</h1><p>Google在2017年发布了全球站点标签（gtag.js）。这个新的库可以在Google的网站和转化测量产品中通用，使得用户只需使用gtag.js代码就可以管理不同的产品，而不需要管理多个标签。在gtag之前，Google Analytics和Google Ads使用的是不同的标签框架。<br>gtag.js框架以统一和标准化的方式向Google Analytics、Google Ads（以前称为Google Adwords）和其他Google服务发送数据。</p><h2 id="使用gtag接入ga4"><a href="#使用gtag接入ga4" class="headerlink" title="使用gtag接入ga4"></a>使用gtag接入ga4</h2><ol><li><p>登录<a href="https://analytics.google.com/analytics/web">Google analytic 后台</a>, 在Amin -&gt; Property settings -&gt; Data Collection and modification -&gt; Data streams 可以找到一个 <code>G-*</code> 开头的ID，这就是你的GA4 ID<br><img src="https://github.com/user-attachments/assets/09ee0ca2-a1e0-48e2-8f88-b94418a51a48" alt="image"></p></li><li><p>使用gtag 接入<br><img src="https://github.com/user-attachments/assets/43c7d5f3-77fa-4307-a7dd-88d5836ff2db" alt="image"></p></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://developers.google.com/tag-platform/gtagjs">About the Google tag</a></li><li><a href="https://zhuanlan.zhihu.com/p/53993217?utm_source=wechat_session&utm_medium=social&utm_oi=793368515217330176&from=timeline&isappinstalled=0">先利其器 - 查看 Google Analytics 报表的小诀窍</a></li><li><a href="https://www.analyticsmania.com/post/gtag-vs-google-tag-manager/">GTAG vs Google Tag Manager. What is the Difference? What to Choose?  </a></li><li><a href="https://www.analyticsmania.com/post/gtag-vs-analytics-js/">GTAG vs Analytics.js </a></li><li><a href="https://developers.google.com/analytics/devguides/collection/gtagjs/events">Measure Google Analytics Events </a></li><li><a href="https://awoo.ai/zh-hant/blog/google-analytics4-events/">不可不知的GA4事件！與通用版Analytics(GA3)有什麼不同呢?  </a></li><li><a href="https://support.google.com/analytics/answer/3123666?hl=en#zippy=%2Cin-this-article">Set up User-ID</a></li><li><a href="https://support.google.com/analytics/answer/2709828?hl=zh-Hans#collection">自定义维度和指标</a></li><li><a href="https://www.ichdata.com/google-analytics-history.html">Google Analytics发展历史（1995到2024）</a></li><li><a href="https://onward.justia.com/history-of-google-analytics/">History of Google Analytics</a></li><li><a href="https://developers.google.com/tag-platform/devguides/existing">分析现有代码配置</a></li><li><a href="https://support.google.com/analytics/answer/9310895?hl=en#zippy=%2Cin-this-article">UA→GA4How gtag.js for UA maps to GA4</a></li><li><a href="https://www.ichdata.com/google-analytics-and-google-tag-manager-limits.html">Google Analytics 4 免费版和付费版的限额对比</a></li><li><a href="https://developers.google.com/analytics/devguides/collection/analyticsjs">将 analytics.js 添加到网站中</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Google-Analytics&quot;&gt;&lt;a href=&quot;#Google-Analytics&quot; class=&quot;headerlink&quot; title=&quot;Google Analytics&quot;&gt;&lt;/a&gt;Google Analytics&lt;/h1&gt;&lt;p&gt;目前市场流量分析工具，Goo</summary>
      
    
    
    
    
    <category term="SEO" scheme="https://derycktse.github.io/tags/seo/"/>
    
    <category term="DataAnalytics" scheme="https://derycktse.github.io/tags/dataanalytics/"/>
    
  </entry>
  
  <entry>
    <title>什么是OCSP</title>
    <link href="https://derycktse.github.io/2024/07/28/2024/what-is-ocsp/"/>
    <id>https://derycktse.github.io/2024/07/28/2024/what-is-ocsp/</id>
    <published>2024-07-28T12:58:00.000Z</published>
    <updated>2025-03-30T03:23:45.238Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司的服务遇到了个问题，一些内容在iOS里面需要十几二十秒的白屏之后才能显示正常。定位到最后发现是OCSP的问题。</p><h1 id="OCSP是什么"><a href="#OCSP是什么" class="headerlink" title="OCSP是什么"></a>OCSP是什么</h1><p>OCSP（Online Certificate Status Protocol，在线证书状态协议）是一种用于检查数字证书状态的网络协议。OCSP的主要功能是验证证书的有效性，以确定其是否被吊销。</p><p>OCSP是作为证书吊销列表CRL而出现的。 CRL是一个维护已撤销证书的列表，由浏览器下载，检查客户端访问的网站证书是否被撤销。但随着证书越来越多，这种黑名单机制势必性能会变差，因此有了OCSP协议。</p><h2 id="OCSP的工作流程"><a href="#OCSP的工作流程" class="headerlink" title="OCSP的工作流程"></a>OCSP的工作流程</h2><p>OCSP的工作流程大致如下：</p><ol><li><strong>客户端请求</strong>：客户端向OCSP服务器发送一个请求，包含需要验证的证书的标识信息。</li><li><strong>OCSP服务器响应</strong>：OCSP服务器查询其数据库，返回该证书的状态信息。</li><li><strong>客户端处理</strong>：客户端根据OCSP服务器的响应，决定是否信任该证书。</li></ol><p><img src="https://github.com/user-attachments/assets/551e6b2b-eb17-4d73-91c9-8d03ccba87ff" alt="image"><br><a href="https://www.ssl.com/faqs/faq-digital-certificate-revocation/">图片来源</a></p><p>OCSP的优点包括：</p><ul><li><strong>实时性</strong>：OCSP提供了实时的证书状态信息，而CRL可能会有延迟。</li><li><strong>效率</strong>：OCSP请求通常比下载整个CRL文件要小得多，节省了带宽和时间。</li></ul><p>OCSP有一些潜在的缺点，例如：</p><ul><li><strong>隐私问题</strong>：每次验证证书时，客户端需要与OCSP服务器通信，这可能会暴露用户的浏览行为。</li><li><strong>可用性问题</strong>：如果OCSP服务器不可用，客户端可能无法验证证书的状态。</li></ul><h1 id="OCSP-Stapling"><a href="#OCSP-Stapling" class="headerlink" title="OCSP Stapling"></a>OCSP Stapling</h1><p>OCSP Stapling（OCSP 封套），是指服务端在证书链中包含颁发机构对证书的 OCSP 查询结果。这是一种向浏览器提供撤销信息的技术。证书stapling过程涉及将当前的OCSP响应附加到HTTPS连接中。这样，服务器和浏览器之间的流量就会减少，因为浏览器不再需要自行请求OCSP。这有助于解决上述的隐私和性能问题。</p><h1 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h1><p>OCSP一个最大的问题就是实时查询的时候，会影响到性能<br>公司使用的证书是Godaddy，Godaddy并没有中国区，所以中国iOS区域的用户在OCSP这一步出现了访问的时间延长。</p><img width="548" alt="image" src="https://github.com/user-attachments/assets/9641c3ea-f6f1-4c6b-8134-1401644ac179"><h1 id="查看网站证书概要"><a href="#查看网站证书概要" class="headerlink" title="查看网站证书概要"></a>查看网站证书概要</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> | openssl s_client -servername example.com -connect example.com:443 | openssl x509 -noout -issuer</span><br></pre></td></tr></table></figure><img width="1243" alt="image" src="https://github.com/user-attachments/assets/1f955a07-d568-4f07-aa56-a3f669800ce3"><h1 id="处理方案"><a href="#处理方案" class="headerlink" title="处理方案"></a>处理方案</h1><p>考虑到国内用户的体量与部署，我们最终将网站的证书切换到了有国内部署的global sign</p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ul><li><a href="https://www.fortinet.com/resources/cyberglossary/ocsp">What Is Online Certificate Status Protocol (OCSP)?</a></li><li><a href="https://www.ssl.com/faqs/faq-digital-certificate-revocation/">FAQ: Digital Certificate Revocation</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近公司的服务遇到了个问题，一些内容在iOS里面需要十几二十秒的白屏之后才能显示正常。定位到最后发现是OCSP的问题。&lt;/p&gt;
&lt;h1 id=&quot;OCSP是什么&quot;&gt;&lt;a href=&quot;#OCSP是什么&quot; class=&quot;headerlink&quot; title=&quot;OCSP是什么&quot;&gt;&lt;/</summary>
      
    
    
    
    
    <category term="network" scheme="https://derycktse.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记《阅读、游历和爱情》</title>
    <link href="https://derycktse.github.io/2024/07/28/2024/reading-note-reading-traveling-and-love/"/>
    <id>https://derycktse.github.io/2024/07/28/2024/reading-note-reading-traveling-and-love/</id>
    <published>2024-07-28T02:58:00.000Z</published>
    <updated>2025-03-30T03:23:45.237Z</updated>
    
    <content type="html"><![CDATA[<p>这本书我觉得读起来还是挺舒服的，没什么说教的味道，用一句现在比较流行话来说，就是没什么“爹味”。文风质朴，像在一个富有经验的长者对话。虽然不能有什么实质的改变。但是怎么说，一本书读下来之后，像享受了一场精神按摩，缓解了一些焦虑。</p><p>快乐和幸福是有区别，快乐代表轻松，而幸福是一种所谓的苦尽甘来，如此一说，幸福应该是一种比较级，而快乐则是一种状态。</p><p>关于读书，梁说我们现在的看书条件越好了，却不像以前那么投入。谈读书篇，他分享了几个技巧，我觉得非常有意义：</p><ol><li>带着问题去阅读，当你带着疑问去读、去寻找答案时，自我的感受会更深刻。</li><li>了解作者背后的故事，每一本书，都有自己时代创作背景。</li><li>要自己多写，看书的时候，我们可能会觉得书里一些地方这不好那不好。只有自己去写了，我们才能发现问题。</li></ol><p>书中聊到，当代年轻人，关于坐几个小时的高铁就好累，这比他以前坐几十个小时绿皮火车差远了。<br>这里我觉得跨时代比较是没有意义的，一个时代有一个时代的幸福感与苦难。我时常会觉得，当然人民生活水平比以前高了不是一丁半点，但是精神世界却越来越贫瘠，这里不是说不丰富，而是我们越来越焦虑了。就像那句话所说 “如果我不曾见过阳光，那么我原本可以忍受黑暗”</p><blockquote><p>今天的年轻人，离自己向往的生活只有一步之遥，但是就这一步之遥跨不过去。他们内心里积累了这么多感受和愿意去探索的东西，但是行动上跟不上，暴风骤雨迎面而来的时候，就没有那个勇气。</p></blockquote><p>当代的年轻人，有很多的可能性，但是从生活的轨迹看上去，却看不到什么可能性。这里的矛盾是：想得太多, 行动却太少。当这是正常的，因为我们正处于一个没有历史借鉴的时代。</p><p>书中给的许多建议我都觉得还是挺好，可能我们在这么忙碌工作中，也应该思考思考，是不是忽略了精神生活了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这本书我觉得读起来还是挺舒服的，没什么说教的味道，用一句现在比较流行话来说，就是没什么“爹味”。文风质朴，像在一个富有经验的长者对话。虽然不能有什么实质的改变。但是怎么说，一本书读下来之后，像享受了一场精神按摩，缓解了一些焦虑。&lt;/p&gt;
&lt;p&gt;快乐和幸福是有区别，快乐代表轻</summary>
      
    
    
    
    
    <category term="读书笔记" scheme="https://derycktse.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记《微习惯》</title>
    <link href="https://derycktse.github.io/2024/07/18/2024/reading-note-mini-habits/"/>
    <id>https://derycktse.github.io/2024/07/18/2024/reading-note-mini-habits/</id>
    <published>2024-07-18T08:43:30.000Z</published>
    <updated>2025-03-30T03:23:45.237Z</updated>
    
    <content type="html"><![CDATA[<p>最近读了一本书，名字叫《微习惯：简单到不可能失败的自我管理法则》。书很薄，内容也不复杂，不过感觉蛮有意思。书名非常概括，从书名我们也能大概猜到书中就会讲什么。</p><p>作者叫史蒂芬盖斯，是个名不见经传的普通宅男。起因是在2013年新年伊始，由于对过去的一年自我表现不太满意，作者打算在新的一年要提升锻炼的目标。于是打算花30分钟锻炼，可是刚开始一会就想要放弃了。于是作者就改变策略：”今天就做1个俯卧撑就行吧。“ 结果作者发现，非常轻松就完成了，甚至还想多做几个。如此反复几天下去，没想到反而达成的健身的目标。<br>于是作者发现通过微小的一步步养成习惯的策略非常有效，便把这段经历写成了一篇文章放到博客上，引起了热烈的反响。作者也从一个个的微习惯中培养出了真正的习惯， 某种程度上来说实现了对自己的逆袭。</p><h1 id="微习惯是什么"><a href="#微习惯是什么" class="headerlink" title="微习惯是什么"></a>微习惯是什么</h1><p>总的来说，微习惯就是你强迫自己每天做的微不足道的积极行为。比如你想培养写作的习惯，你可以给自己设定目标，每天只写个50字；如果想培养阅读的习惯，可以给自己设定目标每天翻2页书。<br>微习惯策略行动，就是运用少量的意志力强迫自己做一件事情。 因为太小而不至于无法完成，因此，你不会有机会体验未完成目标导致的常见消极情绪 。</p><p>作者认为，很多时候人们无法让改变的效果持久下去时，会认为原因是在自己身上。其实，不一定是他们自己本身的问题，可能只是他们采取的策略不对而已。研究表明，人们总是会过高地高估自己的自控力。很多时候我们总陷入自己没有什么进步的自责之中，却没意识到可能是自己的策略出了问题。<br>而微习惯非常小，小到不可能失败。正是因为这个特性，它不会给你造成任何负担，并且具有超强的“欺骗性”，它也因此成了一种极其有效的习惯养成策略。 </p><h1 id="微习惯是如何起作用的"><a href="#微习惯是如何起作用的" class="headerlink" title="微习惯是如何起作用的"></a>微习惯是如何起作用的</h1><p>习惯形成的第一个信号是抵触情绪减弱。<br>行为要变成习惯，需要有一个过程，而变成过程之前，我们需要有两个途径来支撑我们的行为： 动力和意志力。</p><h2 id="动力-意志力"><a href="#动力-意志力" class="headerlink" title="动力 &amp; 意志力"></a>动力 &amp; 意志力</h2><p>动力跟意志力都可以让我们养成一个习惯，但动力和意志力不是非此即彼的，二者之间存在重要的关系。当你做事缺乏动力时，意志力的消耗量就会猛涨。意志力消耗量较高时，你会难以长期维持一个行为并将其培养成习惯。</p><p><img src="https://github.com/user-attachments/assets/d7f0335b-df6d-43d2-a4af-e7e5407c50d6" alt="image"></p><h3 id="动力并不靠谱"><a href="#动力并不靠谱" class="headerlink" title="动力并不靠谱"></a>动力并不靠谱</h3><p>俗话说，一鼓作气，再而衰，三而竭。我们都经历过一种热情递减效应，比如吃第五块比萨时的愉悦感会略低于吃第四块时的，吃第四块时的又略低于吃第三块时的。再比如，可乐的第一口往往是最好喝的，越往后肥宅快乐水带来快乐效果会越减少。我们在进行重复行为时也存在同样的现象。<br>人们在做计划的时候经常性忽略了动力和精力水平可能会出现波动，以为在实际过程中能够一直保持当时的精神和精力状态。所以常常制定了一些实际上可能完成不了的目标。<br>所以，依靠动力的策略并不靠谱。不是说有动力不好，相比，如果我们想持久去改变，单靠动力并不是一个很可靠的策略。</p><h3 id="意志力"><a href="#意志力" class="headerlink" title="意志力"></a>意志力</h3><p>比起动力来说，我们更应该依赖意志力，因为意志力有三个特点：</p><ol><li>意志力可靠。当然，前提是我们能强迫自己</li><li>意志力可以被强化。和动力不一样，意志力可以像肌肉一样得到强化</li><li>意志力策略可以通过计划执行。如果你依赖动力，严格执行时间计划是很困难的。没人知道你执行的时候是否还有动力了。</li></ol><p>所以，我们应该更多地去依靠我们的意志力。当然了，如果动力越足，我们越会消耗更少的意志力。但是，有一个问题，意志力是会损耗的。</p><h2 id="微习惯为什么效果"><a href="#微习惯为什么效果" class="headerlink" title="微习惯为什么效果"></a>微习惯为什么效果</h2><p>引起意志力损耗的5大主要因素是：<br>•  努力程度<br>•  感知难度<br>•  消极情绪<br>•  主观疲劳<br>•  血糖水平<br>采用微习惯的方式，对这5点的损耗都非常低。书里举了一个生动的例子，微习惯像是习惯的一只特洛伊木马，悄悄潜入我们的大脑，让我们在比较低耗能的情况下，不知不觉把习惯给养成。</p><h1 id="如何行动"><a href="#如何行动" class="headerlink" title="如何行动"></a>如何行动</h1><p>既然微习惯有效，那我们应该如何去使用微习惯呢？书中给了几个步骤让我们培养微习惯</p><h2 id="八大步骤：-培养成你的微习惯"><a href="#八大步骤：-培养成你的微习惯" class="headerlink" title="八大步骤： 培养成你的微习惯"></a>八大步骤： 培养成你的微习惯</h2><h3 id="1-选择一个微习惯，制定每天的计划"><a href="#1-选择一个微习惯，制定每天的计划" class="headerlink" title="1. 选择一个微习惯，制定每天的计划"></a>1. 选择一个微习惯，制定每天的计划</h3><p>鉴于微习惯对意志力的消耗很小，我们可以同时制定好几个微习惯。但是微习惯数量不要超过四个，因为那样太多了。数量越多，你的精力就会越分散，就越有可能忽略或者忘记其中一个。</p><p>作者提供了三种微习惯计划：一周弹性计划、单一微计划和多项微计划，以适应不同人的需求和能力。一周弹性计划建议从一个习惯开始，一周后根据个人感受调整计划。单一微计划专注于一个重要的习惯，适合意志力较弱或情绪低落的人。多项微计划则适合那些想同时培养多个习惯的人。</p><p>对于不适合每天执行的习惯，作者建议以周为单位来培养，这可能需要更长时间，但最终会形成稳定的模式。他还提出了混合微习惯的概念，即在两个选项之间选择，比如去健身房或者在家做一些简单的锻炼。这种策略提供了灵活性，同时鼓励每天都有所行动。</p><h3 id="2-挖掘习惯找到内在价值"><a href="#2-挖掘习惯找到内在价值" class="headerlink" title="2. 挖掘习惯找到内在价值"></a>2. 挖掘习惯找到内在价值</h3><p>通过多思考”为什么“，找到我们目标的来源。只有知道这个目标的价值，我们才能找到坚持下去的意义所在。<br>作者提出使用“为什么钻头”方法，即不断追问“为什么”直到找到行动背后的核心动机。这要求诚实地回答，直到找到核心理由。其实就是<code>5Why分析法</code></p><h3 id="3-明确习惯依据，将其纳入日程"><a href="#3-明确习惯依据，将其纳入日程" class="headerlink" title="3. 明确习惯依据，将其纳入日程"></a>3. 明确习惯依据，将其纳入日程</h3><p>习惯依据通常有两种：时间和行为方式。对于日程规律的人，基于时间的习惯设置可能更有效；而对于日程灵活的人，基于行为方式可能更适合。我个人比较推崇的方式是基于时间的日程方式。</p><h3 id="4-建立回报机制，以奖励提升成就感"><a href="#4-建立回报机制，以奖励提升成就感" class="headerlink" title="4. 建立回报机制，以奖励提升成就感"></a>4. 建立回报机制，以奖励提升成就感</h3><p>人们在感到满足和获得回报时更容易做出积极的决定，同样，如果一个行为没有明显的回报，大脑可能会抵制这个行为。这就是有时候一些重复的活动会让我们觉得很枯燥的原因。所以，每当我们有一点进步的时候，不妨给自己来点儿奖励，吃顿好的或者是其他娱乐形式放松一下。</p><h3 id="5-记录与追踪完成的情况"><a href="#5-记录与追踪完成的情况" class="headerlink" title="5. 记录与追踪完成的情况"></a>5. 记录与追踪完成的情况</h3><p>虽然不推荐流于形式，但是我个人还是推荐采用打卡的方式来记录。特别是以一个日历的形式来打卡，因为那样很直观。我个人就会以一份日历来记录自己的运动计划，曾经我在公司的健身房看过一个同事随手拿着一本小册子，每次练完卧推之后写点东西，应该是在记录自己的组别和次数。<br>总之，记录载体并不重要，只要能够直观与方便记录我们在慢慢变好就可以。</p><h3 id="6-微量开始，超额完成"><a href="#6-微量开始，超额完成" class="headerlink" title="6. 微量开始，超额完成"></a>6. 微量开始，超额完成</h3><p>微习惯不会让你有失败的借口，不会让你感觉到愧疚。既然定的目标轻而易举，我们能够很轻松或者是在不知不觉中就把任务给完成了。<br>设定小而易于实现的目标，这样做有几个好处：</p><ol><li><strong>强化意志力</strong>：通过频繁地完成小任务，我们可以逐渐增强意志力，就像健身房里通过多次举起较轻的重量来训练肌肉的持久性一样。</li><li><strong>立即取得进步</strong>：微习惯策略允许我们立即看到进步，这本身就是一种激励。一旦开始行动，动力就会接管，减少对意志力的依赖。</li><li><strong>避免耗尽意志力</strong>：微习惯的任务要求低到即使在意志力几乎耗尽的情况下也能完成，这样就避免了失败的借口和内疚感。</li></ol><h3 id="7-服从计划安排，摆脱高期待值"><a href="#7-服从计划安排，摆脱高期待值" class="headerlink" title="7. 服从计划安排，摆脱高期待值"></a>7. 服从计划安排，摆脱高期待值</h3><p>从潜意识层面来看，在我们超额完成任务后，大脑的期待阈值可能会不知不觉被提高。作者不建议这样，不断提高期待值不是我们的目标，目标应该是放在能够长久坚持下去。</p><h3 id="8-留意习惯养成的标志"><a href="#8-留意习惯养成的标志" class="headerlink" title="8. 留意习惯养成的标志"></a>8. 留意习惯养成的标志</h3><p>如果能够长期坚持微习惯，那么它将会在不知不觉中变成我们真正的习惯。变成真正的习惯的信号：</p><ol><li>没有抵触的情绪</li><li>认同自己的拥有这个习惯的身份</li><li>对该行动不再考虑以及焦虑</li><li>已经将该行为常态化了<br>当你的行为符合上面几点的时候，我们就成功培养了一个习惯。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>个人认为，这个微习惯有点另辟蹊径。我们自古有句话叫“取法乎上，仅得乎中” 。意思就是我们一开始定一个很高的目标，即使最终不能达成，也能得到一个中等的效果。而微习惯却走的是一个”取法乎下“的打法，但也可以让我们取得超预期的成果。但两者其实不违背，一种是鞭策的方式，而一种是激励的方式。</p><p>无论如何，培养一个习惯是长期坚持下来的结果，书中给了我们达成培养习惯目的另一种途径。如果你有过想培养一个习惯但是迟迟不能成功的经历，不妨试试书中提供的方式。<br>总而言之，微习惯，微量开始，超额完成，形成习惯，持之以恒。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://minihabits.com/take-the-one-push-up-challenge/">Take The One Push-up Challenge</a></li><li><a href="https://book.douban.com/subject/26877306/">微习惯</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近读了一本书，名字叫《微习惯：简单到不可能失败的自我管理法则》。书很薄，内容也不复杂，不过感觉蛮有意思。书名非常概括，从书名我们也能大概猜到书中就会讲什么。&lt;/p&gt;
&lt;p&gt;作者叫史蒂芬盖斯，是个名不见经传的普通宅男。起因是在2013年新年伊始，由于对过去的一年自我表现不太</summary>
      
    
    
    
    
    <category term="读书笔记" scheme="https://derycktse.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>使用Nginx Server Side Includes</title>
    <link href="https://derycktse.github.io/2024/07/06/2024/using-nginx-server-side-includes/"/>
    <id>https://derycktse.github.io/2024/07/06/2024/using-nginx-server-side-includes/</id>
    <published>2024-07-06T08:43:30.000Z</published>
    <updated>2025-03-30T03:23:45.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Server-Side-Includes"><a href="#什么是Server-Side-Includes" class="headerlink" title="什么是Server Side Includes"></a>什么是Server Side Includes</h1><p>我们来看看维基百科是怎么解释的:</p><blockquote><p><strong>服务器端内嵌</strong>（<strong>Server Side Includes，亦简称为SSI</strong>）是一种大多数仅应用于<a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91" title="互联网">互联网</a>上的简单解释性<a href="https://zh.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%84%9A%E6%9C%AC" title="服务器端脚本">服务器端脚本</a>语言。<br>SSI最常见的用法是将一个或多个文件的内容包含在<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E9%A1%B5%E6%9C%8D%E5%8A%A1%E5%99%A8" title="网页服务器">网页服务器</a>的页面上。例如，一张包含每日报价的页面可以通过下面一段代码将报价单包含在页面中：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--#include virtual=&quot;../quote.txt&quot; --&gt;</span></span><br></pre></td></tr></table></figure><p><strong>SSI 简称代码片段，通过特殊的语法糖，服务器在响应的时候遇到相关指令，会发起另外的请求（subrequest）去请求对应的代码片段之后嵌入到父页面中，从而实现页面在服务端拼接</strong></p><h3 id="SSI-的运作机制"><a href="#SSI-的运作机制" class="headerlink" title="SSI 的运作机制"></a>SSI 的运作机制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  [Client]</span><br><span class="line">     |</span><br><span class="line">     | HTTP Request</span><br><span class="line">     v</span><br><span class="line">[NGINX Server]</span><br><span class="line">     |</span><br><span class="line">     |--- [SSI Parser]</span><br><span class="line">     |        |</span><br><span class="line">     |        |----- [Include Header.html] // SSI 片段</span><br><span class="line">     |        |</span><br><span class="line">     |        |----- [Include Menu.html] // SSI 片段</span><br><span class="line">     |        |</span><br><span class="line">     |        |----- [Include Footer.html] // SSI 片段</span><br><span class="line">     |</span><br><span class="line">     v</span><br><span class="line">[HTML Page]</span><br><span class="line">     |</span><br><span class="line">     | HTTP Response</span><br><span class="line">     v</span><br><span class="line">  [Client]</span><br></pre></td></tr></table></figure><h1 id="如何使用Server-Side-Includes"><a href="#如何使用Server-Side-Includes" class="headerlink" title="如何使用Server Side Includes"></a>如何使用Server Side Includes</h1><p>使用nginx ssi指令即可开启服务</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"><span class="attribute">ssi</span> <span class="literal">on</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p> 我们以nginx为例实现一个ssi 服务, 使用nginx 代理到 nodejs(这里我们称为upstream服务), 然后在nginx上面开启ssi 服务。</p><p> 链路如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[Client]</span><br><span class="line">    |</span><br><span class="line">    | HTTP Request</span><br><span class="line">    v</span><br><span class="line">[NGINX Proxy]</span><br><span class="line">    |</span><br><span class="line">    | HTTP Request</span><br><span class="line">    v</span><br><span class="line">[Upstream Server (Node.js)]</span><br><span class="line">    |</span><br><span class="line">    | HTTP Response</span><br><span class="line">    v</span><br><span class="line">[NGINX Proxy]</span><br><span class="line">    |</span><br><span class="line">    | HTTP Response</span><br><span class="line">    v</span><br><span class="line">[Client]</span><br></pre></td></tr></table></figure><h2 id="nginx设置代理"><a href="#nginx设置代理" class="headerlink" title="nginx设置代理"></a>nginx设置代理</h2><p>nginx 设置代理并开启ssi</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">error_log</span> logs/<span class="literal">error</span>.log <span class="literal">debug</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">ssi</span> <span class="literal">on</span>; <span class="comment"># 这个指令表示开启ssi</span></span><br><span class="line"></span><br><span class="line">    <span class="section">upstream</span> to_node &#123;</span><br><span class="line">        <span class="attribute">server</span> localhost:<span class="number">3000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">8080</span>;</span><br><span class="line">        <span class="attribute">server_name</span> localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy all request to node server</span></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://to_node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>upstream 服务直接响应html内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index-static.html 内容 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#include virtual=&quot;./header-block.html&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#include virtual=&quot;./footer-block.html&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- header-block.html 内容 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>footer block from ssi<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- footer-block.html 内容 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>footer block from ssi<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后打开页面<br><img src="https://github.com/community/community/assets/3389862/934e4705-e5fb-49ae-9b2e-ea0d7960b515"></p><p>是不是很简单？</p><h2 id="异常的出现"><a href="#异常的出现" class="headerlink" title="异常的出现"></a>异常的出现</h2><p>那么，对于SSI的使用数量，是否有上限呢？让我们往页面里面再添加SSI</p><p>修改如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#include virtual=&quot;./header-block.html&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#include virtual=&quot;./footer-block.html&quot; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#include virtual=&quot;./footer-block.html&quot; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#include virtual=&quot;./footer-block.html&quot; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#include virtual=&quot;./footer-block.html&quot; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#include virtual=&quot;./footer-block.html&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问结果</p><p><img src="https://github.com/community/community/assets/3389862/57ca58ad-40a8-4832-a7a6-df6547c7e60d"></p><h3 id="oops-发生了什么事？"><a href="#oops-发生了什么事？" class="headerlink" title="oops 发生了什么事？"></a>oops 发生了什么事？</h3><p>在nginx 的 error log里，我们发现问题所在</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2024/06/24 19:41:34 [warn] 67237<span class="comment">#15146903: 10 worker_connections are not enough, reusing connections</span></span><br><span class="line">2024/06/24 19:41:34 [alert] 67237<span class="comment">#15146903: *82 10 worker_connections are not enough while connecting to upstream, client: 127.0.0.1, server: localhost, request: &quot;GET /html/index-static.html HTTP/1.1&quot;, subrequest: &quot;/html/./footer-block.html&quot;, upstream: &quot;http://127.0.0.1:3000/html/./footer-block.html&quot;, host: &quot;localhost:8080&quot;</span></span><br><span class="line">2024/06/24 19:41:34 [alert] 67237<span class="comment">#15146903: *82 10 worker_connections are not enough while connecting to upstream, client: 127.0.0.1, server: localhost, request: &quot;GET /html/index-static.html HTTP/1.1&quot;, subrequest: &quot;/html/./footer-block.html&quot;, upstream: &quot;http://[::1]:3000/html/./footer-block.html&quot;, host: &quot;localhost:8080&quot;</span></span><br></pre></td></tr></table></figure><p><code>worker_connections are not enough while connecting to upstream</code> </p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>这里体现了ssi 的第一个特性: <strong>subrequest 同样也会消耗worker的数量</strong><br>所以，ssi同样也会跟我们的父请求抢占worker资源，每个页面的SSI数量也需要严格进行限制。</p><h1 id="对upstream的挑战"><a href="#对upstream的挑战" class="headerlink" title="对upstream的挑战"></a>对upstream的挑战</h1><p>既然父请求与SSI都会占用worker数量的话，我们很容易想到，使用SSI的技术，对后端的流量会造成放大</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>假设我们在页面里面请求m个SSI，而upstream server的最大支撑请求数为n, 且<code>m &gt; n</code>, 这个时候会发生什么事？</p><p>我们按照下面的表格对服务进行改造</p><table><thead><tr><th>请求数</th><th>server-side include file</th><th>upstream max connection</th></tr></thead><tbody><tr><td>1</td><td>10</td><td>3</td></tr></tbody></table><p>如上面的请求，我们在一个父文件里面设置10个ssi，而upstream服务我们设置限流3个请求，请求父文件之后看看会发生什么：</p><p>在html文件上设置多个SSI片段</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#include virtual=&quot;./block.html&quot; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#include virtual=&quot;./block.html&quot; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#include virtual=&quot;./block.html&quot; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#include virtual=&quot;./block.html&quot; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#include virtual=&quot;./block.html&quot; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#include virtual=&quot;./block.html&quot; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#include virtual=&quot;./block.html&quot; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#include virtual=&quot;./block.html&quot; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#include virtual=&quot;./block.html&quot; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#include virtual=&quot;./block.html&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对upstream server增加限流逻辑，使得SSI请求触发限流</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们在node服务里面进行一个限流</span></span><br><span class="line"><span class="keyword">const</span> ratelimit = <span class="built_in">require</span>(<span class="string">&#x27;koa-ratelimit&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> db = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">logger</span>())</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">ratelimit</span>(&#123;</span><br><span class="line">    <span class="attr">driver</span>: <span class="string">&#x27;memory&#x27;</span>,</span><br><span class="line">    <span class="attr">db</span>: db,</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="attr">errorMessage</span>: <span class="string">&#x27;Oops! 你被限流了!&#x27;</span>,</span><br><span class="line">    <span class="attr">id</span>: <span class="function">(<span class="params">ctx</span>) =&gt;</span> ctx.<span class="property">ip</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="attr">remaining</span>: <span class="string">&#x27;Rate-Limit-Remaining&#x27;</span>,</span><br><span class="line">      <span class="attr">reset</span>: <span class="string">&#x27;Rate-Limit-Reset&#x27;</span>,</span><br><span class="line">      <span class="attr">total</span>: <span class="string">&#x27;Rate-Limit-Total&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">max</span>: <span class="number">3</span>,</span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>openresty/1.21.4.1</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Mon, 24 Jun 2024 12:07:27 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Rate-Limit-Remaining</span><span class="punctuation">: </span>2</span><br><span class="line"><span class="attribute">Rate-Limit-Reset</span><span class="punctuation">: </span>1719230857.668981</span><br><span class="line"><span class="attribute">Rate-Limit-Total</span><span class="punctuation">: </span>3</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>ssi from block content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>ssi from block content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>ssi from block content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>ssi from block content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>ssi from block content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Oops! 你被限流了!</span></span><br><span class="line"><span class="language-xml">    Oops! 你被限流了!</span></span><br><span class="line"><span class="language-xml">    Oops! 你被限流了!</span></span><br><span class="line"><span class="language-xml">    Oops! 你被限流了!</span></span><br><span class="line"><span class="language-xml">    Oops! 你被限流了!</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>%</span></span><br></pre></td></tr></table></figure><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p><strong>使用SSI 会对源站请求的数量放大，对源站产生更大的压力挑战</strong></p><h1 id="同一个请求-SSI-subrequest是并行还是串行的"><a href="#同一个请求-SSI-subrequest是并行还是串行的" class="headerlink" title="同一个请求, SSI subrequest是并行还是串行的"></a>同一个请求, SSI subrequest是并行还是串行的</h1><p>有没有发现，上述的SSI subrequest ，前面的请求都是好的，而被限流的ssi subrequest ，都是排在后面。</p><p>这里我们有个疑问：SSI的请求是串行的吗？</p><p>其实从前文worker connection限制来看，这个行为应该是倾向于并行请求。如果是串行请求的话，那么worker connection应该没有那么容易就消耗完。我们推测：</p><ol><li>先请求完父请求</li><li>解析html之后，收集所有的子请求</li><li>并行所有的子请求。</li></ol><p>上面仅仅只是猜测，真实情况下，到底是并行请求，还是串行请求，还是要实验了才知道。</p><h2 id="设计实验"><a href="#设计实验" class="headerlink" title="设计实验"></a>设计实验</h2><p>对于我们的node server，我们进行如下改造，设置动态路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sleep</span> = (<span class="params">ms</span>) =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, ms));</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/dynamic/sleep/:time&#x27;</span>, <span class="title function_">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; time &#125; = ctx.<span class="property">params</span>;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">sleep</span>(time);</span><br><span class="line">    ctx.<span class="property">type</span> = <span class="string">&#x27;text/html&#x27;</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">`Hello, world! your path is /dynamic/sleep/<span class="subst">$&#123;time&#125;</span>`</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果请求upstream 服务，<code>/dynamic/sleep/1000</code> 则会等待1s才响应，<code>/dynamic/sleep/2000</code> 则是2s才响应</p><p>接着设置我们的主html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#include virtual=&quot;/dynamic/sleep/10000&quot; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#include virtual=&quot;/dynamic/sleep/8000&quot; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#include virtual=&quot;/dynamic/sleep/5000&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果请求index.html文件，则会解析到3个server-side include file, 3个子请求加载时间分别为10s, 8s, 5s.</p><p>如果是串行，那么时间应超过 10 + 8 + 5 &#x3D; 23s;<br>如果是并行，时间应该接近10s</p><p>请求页面，我们看看会发生什么<br>在浏览器请求的timelime上我们可以很清楚的看到，请求的时间约为10s<br><img src="https://github.com/community/community/assets/3389862/3510e89b-e734-4195-a225-82e1b557b46b"></p><p>在node server的日志</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;-- <span class="attribute">GET</span> /html/index.html</span><br><span class="line">--&gt; GET /html/index.html <span class="number">200</span> 15ms 271b</span><br><span class="line">&lt;-- GET /dynamic/sleep/<span class="number">10000</span></span><br><span class="line">&lt;-- GET /dynamic/sleep/<span class="number">8000</span></span><br><span class="line">&lt;-- GET /dynamic/sleep/<span class="number">5000</span></span><br><span class="line">--&gt; GET /dynamic/sleep/<span class="number">5000</span> <span class="number">200</span> <span class="number">5</span>,002ms 46b</span><br><span class="line">--&gt; GET /dynamic/sleep/<span class="number">8000</span> <span class="number">200</span> <span class="number">8</span>,003ms 46b</span><br><span class="line">--&gt; GET /dynamic/sleep/<span class="number">10000</span> <span class="number">200</span> <span class="number">10s</span> 47b</span><br></pre></td></tr></table></figure><p>我们可以看到：</p><ol><li>服务端接受到了父请求, 并成功响应</li><li>同时接受到了3个子请求，并按照响应时间先后返回</li></ol><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>所以，我们可以得出以下结论</p><ol><li>subrequest 是并发请求的</li><li>即使是并发请求，子请求也会按照引入的顺序从先到后进行请求。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>SSI在实际应用中可以帮我们解决一些页面内容共用的问题，但是</p><ol><li>SSI技术会让用户得到请求的时间更长（父请求时间 + 页面解析时间 + SSI 请求时间 ）</li><li>SSI subrequest会占用worker connection数量，需要我们对代理服务器的worker数量进行合理评估</li><li>采用SSI 技术，也会对upstream server带来成倍以上的压力挑战</li></ol><p>总而言之, <strong>SSI是一把双刃剑，在带给我们便利的同时，也要谨慎使用！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是Server-Side-Includes&quot;&gt;&lt;a href=&quot;#什么是Server-Side-Includes&quot; class=&quot;headerlink&quot; title=&quot;什么是Server Side Includes&quot;&gt;&lt;/a&gt;什么是Server Side In</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>日常记事:2024-04</title>
    <link href="https://derycktse.github.io/2024/05/02/2024/my-daily-2024-04/"/>
    <id>https://derycktse.github.io/2024/05/02/2024/my-daily-2024-04/</id>
    <published>2024-05-02T15:58:41.000Z</published>
    <updated>2025-03-30T03:23:45.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4月"><a href="#4月" class="headerlink" title="4月"></a>4月</h1><h2 id="买车记"><a href="#买车记" class="headerlink" title="买车记"></a>买车记</h2><p>买了一辆车，其实现在感觉不怎么需要，因为出行周边的交通比较发达的。眼看摇到号半年的有效期快到了，最终决定还是买一下吧。也没怎么花时间在挑车上，最终买了丰田的亚洲龙，销售环节基本是妹夫帮忙电话谈的。当时人在老家，跟深圳的4S通了电话，问了两三家可以开到多少，如果合适的话就上深圳提车。可能这里给4S有“外地的单，赚一单是一单”的感觉，价格比在老家便宜了不少，最终直接全款拿下。</p><h2 id="家人的身体健康"><a href="#家人的身体健康" class="headerlink" title="家人的身体健康"></a>家人的身体健康</h2><p>事情的起因是母亲过年的时候感冒之后就一直在咳嗽，拖了很久之后在老家拍了片子，发现双肺肺炎，于是治疗。等到好了以后去复查，CT提示有结节，并且在结论里面写可有可能的是原位Ca(Ca即是 Cancer，也就是癌症。一些医院为了不引起病人的恐慌，特地写了Ca)。<br>看到这情况，果断安排了广州的检查，心里想着可能是病症的早期，到时候可能要做个手术活检定性。<br>好在最终重新做了增强CT结果是没有什么问题，而老家那里说是照CT的机子有点旧可能不是很准（这都行）。</p><p>那几天着实有些担心，幸好最终结果是很好，把时间线捋了出来，这些年经历下来，感觉健康真的是太重要了</p><table><thead><tr><th>时间</th><th>要点</th><th>地点</th><th>内容</th><th>经验说明</th></tr></thead><tbody><tr><td>2024过年前至2024-3月</td><td>过年期间</td><td>-</td><td>1、期间一直咳嗽<br>2、偶尔有盗汗现象</td><td></td></tr><tr><td>2024&#x2F;3&#x2F;12</td><td>治疗前CT检查，双肺肺炎</td><td>潮州市人民医院</td><td>1、左侧第6肋骨骨折并骨痂生长<br>2、双肺感染<br>3、扫级肝右叶囊肿</td><td></td></tr><tr><td>2024&#x2F;4&#x2F;17</td><td>肺炎后复查CT， 发现结节</td><td>潮州市人民医院</td><td>右肺上叶尖端磨玻璃结节</td><td></td></tr><tr><td>2024&#x2F;4&#x2F;22</td><td>网上云诊室内问诊</td><td>广州中肿</td><td>约不到想看的医生的号；在网上云诊室问诊，直接开了检查</td><td>1、一般来说到医院的第一次问诊，医生都会开具一些检查，特别是一些权威的医院都不相信外院检查，所以第一次问诊网上问诊的话，还是比较省时省力<br>2、后续发现开了2项增强1项平扫（结果检查当天重新开）</td></tr><tr><td>2024&#x2F;4&#x2F;26</td><td>检查，当天赴广州做检查</td><td>广州中肿</td><td>1、上午抽血2、下午增强CT（三项检查，胸腔、上腹、颈部）</td><td>1、抽血可以约早一点的号，然后到了随时可以抽血<br>2、上午提前去询问，幸好前台留意到检查单上腹只开的是普通平扫（没有增强）其他两项都是增强，说必须三个都是增强才能做<br>3、增强空腹2小时以上</td></tr><tr><td>2024-04-28 &amp; 29</td><td>增强CT报告结果出来 &amp; 云诊室</td><td>-</td><td>报告提示都是很小的磨玻璃结节影(4mm x 4mm)<br>云诊室问诊：医生说什么大问题，定期检查就好</td><td></td></tr></tbody></table><h2 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h2><p>运动打卡日： 11&#x2F;30<br>跑步km:  50&#x2F;50</p><h2 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h2><table><thead><tr><th>书名</th><th>进度</th></tr></thead><tbody><tr><td>李光耀观天下</td><td>50%</td></tr><tr><td>十八岁出门远行</td><td>5%</td></tr><tr><td>疯狂的尿酸</td><td>10%</td></tr><tr><td>控糖革命</td><td>10%</td></tr><tr><td>这就是chatGPT</td><td>100%</td></tr><tr><td>癌症·真相</td><td>10%</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;4月&quot;&gt;&lt;a href=&quot;#4月&quot; class=&quot;headerlink&quot; title=&quot;4月&quot;&gt;&lt;/a&gt;4月&lt;/h1&gt;&lt;h2 id=&quot;买车记&quot;&gt;&lt;a href=&quot;#买车记&quot; class=&quot;headerlink&quot; title=&quot;买车记&quot;&gt;&lt;/a&gt;买车记&lt;/h2&gt;&lt;p</summary>
      
    
    
    
    
    <category term="总结" scheme="https://derycktse.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>github copilot被封记</title>
    <link href="https://derycktse.github.io/2024/04/11/2024/github-copilot-was-banned/"/>
    <id>https://derycktse.github.io/2024/04/11/2024/github-copilot-was-banned/</id>
    <published>2024-04-11T03:00:00.000Z</published>
    <updated>2025-03-30T03:23:45.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>2024-03-29晚上使用vs code, 发现我的copilot一直不起作用了。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>一开始想着可能我配置错了，尝试了各种方法，都不行：</p><ol><li>切换更早版本的copilot（一年前的版本）</li><li>换一台笔记本</li><li>用其他的IDE</li></ol><p>copliot 的终端报错显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[INFO] [auth] [2024-03-29T14:22:41.063Z] Invalid copilot token: missing token: 403 </span><br><span class="line">[ERROR] [default] [2024-03-29T14:22:41.065Z] GitHub Copilot could not connect to server. Extension activation failed: &quot;Contact Support. You are currently logged in as derycktse.&quot;</span><br></pre></td></tr></table></figure><p>琢磨了一下看着像是被封了</p><h1 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h1><p>于是在官网找到客服提ticket实锤被封。<br>GitHub回复检测我的账号有部署服务的嫌疑，不能解禁。<br><img src="https://github.com/derycktse/Note/assets/3389862/9ddc188b-b3db-4827-b663-690e95668ed6" alt="img"><br>因为我在公司使用了，而公司出口IP走的腾讯云。于是被github 的安全机制扫描出来给封禁了。</p><p>于是我质疑他们只看来源不看使用量的策略，毕竟我个人使用的话，这个量还是微乎其微的。<br><img src="https://github.com/derycktse/Note/assets/3389862/52c2cc78-2c10-4e59-a3c5-6fdb1b352e24" alt="img"><br>最终客服成功给我解封了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;2024-03-29晚上使用vs code, 发现我的copilot一直不起作用了。&lt;/p&gt;
&lt;h1 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>日常记事:2024-03</title>
    <link href="https://derycktse.github.io/2024/03/31/2024/my-daily-2024-03/"/>
    <id>https://derycktse.github.io/2024/03/31/2024/my-daily-2024-03/</id>
    <published>2024-03-31T04:17:31.000Z</published>
    <updated>2025-03-30T03:23:45.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3月"><a href="#3月" class="headerlink" title="3月"></a>3月</h1><p>整一个3月还是比较忙的，毕竟整个3月是公司的一个季度考核末期，所以本着deadline 是第一生产力的原则，大伙都在冲刺。加上3月也病了一场，所以回顾了一下，3月份并没有做太多的事情。</p><h2 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h2><p>3月中上旬一直在咳嗽，运动从过年后也歇息有一段时间了。到了中下旬咳嗽才好了，于是恢复了跑步。整体运动量：<br>运动打卡日： 6&#x2F;31<br>跑步km:  30&#x2F;50</p><h2 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h2><table><thead><tr><th>书名</th><th>进度</th></tr></thead><tbody><tr><td>十分钟冥想</td><td>100%</td></tr><tr><td>洋盘</td><td>100%</td></tr><tr><td>我的母亲做保洁</td><td>100%</td></tr><tr><td>前端工程化：体系设计与实践</td><td>100%</td></tr><tr><td>皮囊</td><td>100%</td></tr><tr><td>阿里人的答案书</td><td>100%</td></tr><tr><td>月光落在左手上</td><td>20%</td></tr><tr><td>暮色将尽</td><td>10%</td></tr><tr><td>35岁后, 我无路可退？</td><td>30%</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;3月&quot;&gt;&lt;a href=&quot;#3月&quot; class=&quot;headerlink&quot; title=&quot;3月&quot;&gt;&lt;/a&gt;3月&lt;/h1&gt;&lt;p&gt;整一个3月还是比较忙的，毕竟整个3月是公司的一个季度考核末期，所以本着deadline 是第一生产力的原则，大伙都在冲刺。加上3月也病了一场</summary>
      
    
    
    
    
    <category term="总结" scheme="https://derycktse.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>如何在微信小程序获取用户手机号</title>
    <link href="https://derycktse.github.io/2024/03/17/2024/get-user-phone-in-weixin-mini-program/"/>
    <id>https://derycktse.github.io/2024/03/17/2024/get-user-phone-in-weixin-mini-program/</id>
    <published>2024-03-17T06:03:35.000Z</published>
    <updated>2025-03-30T03:23:45.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主要流程"><a href="#主要流程" class="headerlink" title="主要流程"></a>主要流程</h1><p>出于安全的考虑，目前在微信小程序端，是无法直接拿到用户的手机号。需要几步安全校验。整体流程大概是：</p><ol><li>在微信后台生成appid &amp; secret</li><li>用户登录微信小程序授权访问手机号，获得手机号获取凭证code</li><li>调取使用appid &amp; secret，获得接口调用凭证 access_token</li><li>使用接口调用凭证 access_token 与手机号获取凭证code调用微信服务获得用户手机号信息<br>简单讲即：用户授权 &amp; 调用两次微信服务</li></ol><h1 id="小程序端"><a href="#小程序端" class="headerlink" title="小程序端"></a>小程序端</h1><p>使用微信的内置组件 <code>&lt;button/&gt;</code>，设置<code>open-type</code> 的值设置为 <code>getPhoneNumber</code>, 当用户点击并同意之后，通过 <code>bindgetphonenumber</code> 事件获取回调信息；<br>代码如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">open-type</span>=<span class="string">&quot;getPhoneNumber&quot;</span> <span class="attr">bindgetphonenumber</span>=<span class="string">&quot;getPhoneNumber&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="title function_">getPhoneNumber</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">detail</span>.<span class="property">code</span>)  <span class="comment">// 动态令牌</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">detail</span>.<span class="property">errMsg</span>) <span class="comment">// 回调信息（成功失败都会返回）</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">detail</span>.<span class="property">errno</span>)  <span class="comment">// 错误码（失败时返回）</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="获取用户小程序服务端流程如下"><a href="#获取用户小程序服务端流程如下" class="headerlink" title="获取用户小程序服务端流程如下"></a>获取用户小程序服务端流程如下</h1><pre class="mermaid">sequenceDiagram    participant user as 微信小程序客户端    participant api as 后端服务    participant wechat as 微信服务    user->>api: 授权手机号获取凭证code    rect rgb(255, 255, 200)    api->>wechat: ask access_token    wechat->>api: access_token    end    rect rgb(255, 150, 230)    api->>wechat: access_token<br>手机号获取凭证code    wechat->>api: 用户手机号信息    end</pre><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>在开发微信小程序过程中，我们可能需要涉及到以下相关的凭证</p><table><thead><tr><th>生成</th><th>作用</th><th>如何获得</th><th>过期时间</th><th>执行端</th></tr></thead><tbody><tr><td>appid</td><td>与微信服务交互的凭证</td><td>管理后台生成</td><td>永久</td><td>微信开发者管理后台</td></tr><tr><td>secret</td><td>与微信服务交互的凭证</td><td>管理后台生成</td><td>永久（如果不在后台重建）</td><td>微信开发者管理后台</td></tr><tr><td>手机号获取凭证code</td><td>加密后的手机号</td><td>用户授权后可以拿到</td><td>一次性，被拿去校验成功之后就失效</td><td>小程序</td></tr><tr><td>接口调用凭据 access token</td><td>用来解密手机号code以此获得手机号</td><td>通过appid与secret调微信的接口拿到</td><td>获取2h后失效，期间都可以使用</td><td>服务端</td></tr><tr><td>登录凭证 code</td><td>跟微信服务获取openid</td><td>每次登录的时候</td><td>一次性，被拿去校验成功之后就失效</td><td>小程序</td></tr><tr><td>openid</td><td>使用 login code拿到，用户的唯一身份</td><td>无法直接获取</td><td>永久</td><td>服务端</td></tr></tbody></table><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/user-login/code2Session.html">小程序登录</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/mp-access-token/getAccessToken.html">获取接口调用凭据</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/user-info/phone-number/getPhoneNumber.html">获取手机号</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;主要流程&quot;&gt;&lt;a href=&quot;#主要流程&quot; class=&quot;headerlink&quot; title=&quot;主要流程&quot;&gt;&lt;/a&gt;主要流程&lt;/h1&gt;&lt;p&gt;出于安全的考虑，目前在微信小程序端，是无法直接拿到用户的手机号。需要几步安全校验。整体流程大概是：&lt;/p&gt;
&lt;ol&gt;
&lt;li</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用obsidian编写博客</title>
    <link href="https://derycktse.github.io/2024/03/16/2024/use-obsidian-to-write-blog/"/>
    <id>https://derycktse.github.io/2024/03/16/2024/use-obsidian-to-write-blog/</id>
    <published>2024-03-16T15:29:20.000Z</published>
    <updated>2025-03-30T03:23:45.238Z</updated>
    
    <content type="html"><![CDATA[<p>这一两年一直在obsidian记录东西，感觉非常不错。不过有一个问题就是，如果只是一味的记录给自己看，可能失去了和别人交流的机会。考虑到这个层面，还是决定以后得多写一些博客。记录自己在生活以及学习上的一些所得所悟，如果能有人看到我的文字有所共鸣或者收获，那将是非常有意义的事情。<br>考虑到博客使用hexo 生成，托管在github page 上，hexo有自己的一套文件夹命名格式，我还是比较喜欢在obsidian里面写东西。所以最简单的办法就是在obsidian里面写好文章直接同步到hexo 文件夹里面就行.</p><p>目前我的obsidian跟hexo文件夹的位置大概是这样：</p><table><thead><tr><th>my note</th><th>folder</th></tr></thead><tbody><tr><td>obsidian</td><td>~&#x2F;my-obsidian-folder&#x2F;blog&#x2F;_posts&#x2F;</td></tr><tr><td>hexo blog</td><td>~&#x2F;my-hexo-folder&#x2F;myname.github.io&#x2F;source&#x2F;_posts&#x2F;</td></tr></tbody></table><p>每次写完之后，直接使用rsync 同步一下我的文件夹，再部署到github page 上即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rsync -r --delete ~/my-obsidian-folder/blog/_posts/ ~/my-hexo-folder/myname.github.io/source/_posts/</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><p>当然还有很多更好的办法，比如使用软链等形式，不过觉得现在这个阶段已经够用了。毕竟写blog的频率当下还达不到非常高频。还是先让自己培养多写作的习惯，等习惯养成之后再进一步优化。</p><p>来自2024-08-17 补充，发现每次<code>rsync</code>后，未修改个文件，同样也被重新覆盖了，这里体现在文件的修改时间上，自然而然想到可以使用对比摘要不同再同步的方法，发现<code>rsync</code>已经有参数支持。可以基于摘要进行比对后再决定是否更新</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-c, --checksum              skip based on checksum, not mod-time &amp; size</span><br></pre></td></tr></table></figure><p>修改版</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -r --checksum --delete ~/my-obsidian-folder/blog/_posts/ ~/my-hexo-folder/myname.github.io/source/_posts/</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一两年一直在obsidian记录东西，感觉非常不错。不过有一个问题就是，如果只是一味的记录给自己看，可能失去了和别人交流的机会。考虑到这个层面，还是决定以后得多写一些博客。记录自己在生活以及学习上的一些所得所悟，如果能有人看到我的文字有所共鸣或者收获，那将是非常有意义的事</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>将输入法切到了双拼</title>
    <link href="https://derycktse.github.io/2024/02/25/older/Switch-the-input-method-to-Shuangpin/"/>
    <id>https://derycktse.github.io/2024/02/25/older/Switch-the-input-method-to-Shuangpin/</id>
    <published>2024-02-25T09:24:07.000Z</published>
    <updated>2025-03-30T03:23:45.238Z</updated>
    
    <content type="html"><![CDATA[<p>关于“双拼输入法” 其实很早就听过了，只不过之前一直没去了解它是什么。记得以前用电脑打字，有时候会不小心将输入法切换到了双拼，因为不知道双拼输入法到底是怎么运作的，所以一下子就不会打字了。</p><p>年前刷博客的时候无意看到有博主在极力推荐双拼输入法，称其大提高了打字的效率。<br>作为一个追求效率的人，我对能提升效率的事情都是很感兴趣的。日常的工作交流也经常需要去打字，提升一下打字效率也是一件很有收益的事情。</p><p>趁着过年期间，抽空学了一下双拼输入法，现在已经将日常输入法切到了双拼输入法了。</p><h1 id="什么是双拼输入法"><a href="#什么是双拼输入法" class="headerlink" title="什么是双拼输入法"></a>什么是双拼输入法</h1><p>双拼是一种基于拼音的输入法。拼音的发音可以简单分由声母和韵母组成。<br>比如 买(m ǎi )、卖(m ài)。</p><p>所有的声母和韵母都在键盘上对应一个按键。这样一来，任意一个汉字都可以用两个按键来定位，从而提升打字的速度。</p><p>举个例子，“梦想”这个词，全拼需要敲键盘9次，而双拼只需要敲4次，这就是双拼提高打字效率的关键之处。</p><ul><li>全拼输入法: mengxiang</li><li>双拼输入法：mgxl (基于小鹤方案)</li></ul><h1 id="如何上手"><a href="#如何上手" class="headerlink" title="如何上手"></a>如何上手</h1><p>双拼输入法有好几种方案，主要的区别就是键位不同而已。<br>我选择的是小鹤双拼的方案，为什么选择这个方案。主要原因有两点：</p><ol><li>小鹤方案把音节都放在了字母键上，规避了符号按键（有一些双拼方案使用了”;” 这个按键），使得我们能记住更少的键位。</li><li>小鹤双拼把使用频率较高的声韵母放在了比较易于发力的食指和中指上（我个人的小指不是很灵活）</li></ol><p>学的过程还是比较顺利的，对着键位，我尝试着把它们记下来。这里分享一个个人小技巧：把每一个按键选一个比较熟悉的汉字作为代表来记。甚至你可以代入你熟悉的人，这样的话你会更容易记得每一个字的位置。<br>举例</p><ul><li>Q键：q + iu &#x3D; 球</li><li>W键：w + ei &#x3D; 喂</li><li>P键：p + ie &#x3D; 撇</li><li>Z键：z + ou &#x3D; 走</li><li>R键：r + uan &#x3D; 软</li><li>M键：m + ian &#x3D; 棉</li></ul><p>只需要在心里将熟悉的字与按键对应并记下来，后续如果打其他的字，只需要将我们熟悉的字单独摘出来声母与韵母组成我们需要的字即可。一般我打字都是按词来打，结合着输入法的联想，大部分情况下都能直接联想到我需要的词。</p><p>记住了按键之后，我们只需要多加练习即可，这里推荐一个在线练习网站:  <a href="https://api.ihint.me/shuang/">https://api.ihint.me/shuang/</a></p><p>当然了，切换输入法总会有一段时间的不应期，因为之前的输入法已经让我们形成了肌肉记忆。但是，一旦你习惯了一个字只需要按两个键就能定位到，那么双拼的好处就会显现出来，打字速度也会逐渐提高。</p><p>我们可以在日常的练习中熟能生巧，找我们的朋友聊聊天拉拉家常，写写日记，只要练习多了，形成肌肉记忆，打字速度自然就会提高。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>从全拼切换到双拼虽然需要一段适应时间，但总体来说并不太难，只需要记得声母和韵母的位置在哪里，剩下的就是花时间熟悉。<br>目前虽然打字还谈不上飞快，但基本上来说已经够用了，后续如果习惯了速度也会进一步提升上来。<br>有意思的是，切换输入法后，和别人聊天会有一种重新组织语言的感觉，好像讲话的风格都不是原来自己的样子。<br>当然了，目前的输入法基本都具备了强大的联想能力，其实使用全拼的速度对大部分人来说已经够用了。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://sspai.com/post/72622">二〇二二年，来试试双拼输入法吧</a></li><li><a href="https://sspai.com/post/42667">让双拼不再是只属于少数人的输入方式</a></li><li><a href="https://www.zhihu.com/question/307750274">辅音、元音与声母、韵母的关系是怎样的？</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI5NTkzOTA0Mg==&mid=2247524303&idx=1&sn=6636d672d3711e10573d8198fd071718&chksm=ec492142db3ea854d5e48754363ea6b02060983b217c12c0ea293b9962d465321eda580c94a6&scene=27">普通话辅音、元音与声母、韵母的关系，两大系统详解</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;关于“双拼输入法” 其实很早就听过了，只不过之前一直没去了解它是什么。记得以前用电脑打字，有时候会不小心将输入法切换到了双拼，因为不知道双拼输入法到底是怎么运作的，所以一下子就不会打字了。&lt;/p&gt;
&lt;p&gt;年前刷博客的时候无意看到有博主在极力推荐双拼输入法，称其大提高了打字的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>读书笔记《打开心智》</title>
    <link href="https://derycktse.github.io/2024/02/11/2024/reading-note-open-your-mind/"/>
    <id>https://derycktse.github.io/2024/02/11/2024/reading-note-open-your-mind/</id>
    <published>2024-02-11T15:20:00.000Z</published>
    <updated>2025-03-30T03:23:45.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><p>这本书的观念好像跟之前说的脑科学的书讲的不太一致。<br>主要是说多巴胺的作用，之前读书的认知是，多巴胺是降级机制，而且是即时奖励。但是这本书讲的说是，多巴胺是动机，而快乐的感觉是享乐热点，这个跟之前有什么区别呢？<br>这本书里说的是多巴胺关联的是动机，而非快乐，多巴胺越浓，动机越强</p><blockquote><p>“上瘾”就是一个典型的高动机低快感的现象。当我们沉迷于某一事物时，我们可能并不感到快乐，但就是控制不住自己，原因就在于这些奖励刺激的是我们的奖赏回路，而不是享乐热点。我们内心深处知道它们并不重要，只是在浪费时间，但就是控制不了大脑的天性。</p></blockquote><ul><li>杏仁体<ul><li>愤怒、焦虑、恐惧这三种情绪都跟杏仁核有密切的关系</li><li>那些行动力比较弱，遇事习惯瞻前顾后、犹豫不决的人，杏仁核的体积往往较大，活动也较为活跃。</li></ul></li><li>前额叶皮层<ul><li>主要负责决策、计划、抽象思考、推理和策略等高级功能。</li><li>抑制</li></ul></li><li>在“杏仁核-前额叶”通路中，前额叶与杏仁核是互相抑制、动态平衡的关系。</li></ul><blockquote><p>如果你总是把一件事情丢给别人决定，或是总是拖延，直到没有余地时才做决定，那么它就会潜移默化地强化“我无法做出决策”的信念，降低你的自我效能感，以及面对威胁时的抵抗力。但反过来，如果你能够做到靠自己的力量果断地做出决策，哪怕结果并不是最好的，也能在潜意识中强化你的内隐自我，让你感受到：我是有能力做出决策的，我是有能力决定和改变外在世界的。那么，当你再次遇到困难和挑战时，当你的内心再一次进入“我究竟能不能做好”的负面情绪时，这些正面信息和内隐自我，就会成为你对抗这种心态的“弹药支撑”，为你源源不断地提供动力。</p></blockquote><p>我发现我就有这样个毛病，特别是对于重大的决策，我自己不会做决策，总是会把问题抛给别人。</p><p>我们做的很多事情，很多计划，都只是定量而不是定性，比如读书运动健身，重要的不是打卡我运动了多少或者是我读了多少本书，而更多应该是按结果我养成了一个什么样的生活习惯或者说是习得了什么知识，如果都只是落实动作，那其实也没什么作用。这些都是充分不必要的条件</p><p>基于“自驱“的”自律“才能持久，过去我们总是觉得自己意志力不足，需要靠意志力让自己变得自律，约束自己，其实是很低效的，更高的是我们要能让自己进入一个健康的循环之中。这让我想起我一直听的一个节目齐俊杰懂财经的作者，说他每天都五六点钟起来，一天写接近一万字，但是自己都不觉得累，如果是单纯靠意志力，肯定是完不成，真正要靠自己愿意，自己喜欢，能驱动自己，才能达成正循环。</p><hr><h1 id="文摘"><a href="#文摘" class="headerlink" title="文摘"></a>文摘</h1><p>《打开心智》<br>李睿秋<br>30个笔记</p><p>◆  第一章 大脑的底层原理：心智模式四大支柱</p><blockquote><blockquote><p>大脑有一个内在的、固定的倾向，那就是对绝大多数事物，都希望采取走捷径的方式快速理解和处理它。因为这样是最省力、最节能的做法。</p></blockquote></blockquote><blockquote><blockquote><p>而焦虑的本质其实就是对于不确定性的恐惧。一件事情，如果我们明确知道它会顺利，我们不会焦虑；如果我们明确知道它不会顺利，我们也不会焦虑（取而代之的可能是恐惧或沮丧）。</p></blockquote></blockquote><blockquote><blockquote><p>1.预设立场：我们的行为和认知往往会为我们预设下一个个立场，让我们带着立场去获取信息；<br>2.证实偏见：在预设立场的基础上，我们会更容易接受跟立场一致的信息，忽略不一致的信息，从而强化我们的立场；<br>3.合理化：一旦我们接触到不一致的信息，我们也会倾向于把它往一致的方向解释，尽可能强化我们的立场。</p></blockquote></blockquote><blockquote><blockquote><p>要想养成良好的习惯，改掉自己的坏毛病，绝不能指望在短时间内一蹴而就，因为那相当于在跟大脑的适应性做斗争，注定是徒劳无功的。你要做的是通过缓慢的、日复一日地微调，去改变自己的基线，让大脑一步步适应新的模式，用它去代替旧的常态。</p></blockquote></blockquote><blockquote><blockquote><p>因此在生活管理中，我设置了一个“15%可能性”的项目，也就是抽出大约15%的时间去尝试和探索自己没有做过的事情，为生活引进一些新鲜感。</p></blockquote></blockquote><blockquote><blockquote><p>“上瘾”就是一个典型的高动机低快感的现象。当我们沉迷于某一事物时，我们可能并不感到快乐，但就是控制不住自己，原因就在于这些奖励刺激的是我们的奖赏回路，而不是享乐热点。我们内心深处知道它们并不重要，只是在浪费时间，但就是控制不了大脑的天性。</p></blockquote></blockquote><blockquote><blockquote><p>一旦我们习惯了这种“不劳而获”的多巴胺获取模式，就更加难以适应需要付出努力才能获取多巴胺的模式了。因为相比之下，后者能够为我们提供的奖励变得更少，能够激发的多巴胺浓度也相对来说变低了。一边是你什么都不用做就可以获得稳定的多巴胺，另一边是你必须先付出努力，经过一定的时间，才能获得的并不确定的多巴胺，大脑自然会更倾向于选择前者。</p></blockquote></blockquote><blockquote><blockquote><p>在这一章中，我们讨论了大脑的四种基本原理。<br>第一种：节能。它是大脑运作的最基本原理。大脑总会倾向于走捷径、抄近道，用最简单的方式去行动，以节省更多的能量和资源，确保我们能更好地趋利避害。<br>第二种：稳定。它是大脑的定位系统。大脑总会倾向于维持现状，希望一切是确定的、已知的、可控的，这样才能获得安全感，维护现有的心智秩序。<br>第三种：预测。它是大脑的导航系统。大脑每时每刻都在完善自己，我们的一切信息输入和行动输出，都是对它的一种训练，把它往对应的方向一步步推动。<br>第四种：反馈。它是大脑的动力系统。大脑以完成任务、获得奖励的方式来强化我们的行动，为我们提供动力，让我们知道什么事情是可以做、应当做的。<br>这四条基本原理，彼此组合，可以演绎出非常复杂的规则。生活中的种种现象，大脑的种种规律，都可以归结到这四点。<br>同样，许多自我提升、自我完善的思维和方法论，也必须基于这几条原理，才能更好地落实，取得成效</p></blockquote></blockquote><p>◆  第二章 掌控情绪：如何与情绪做朋友</p><blockquote><blockquote><p>尽管杏仁核的名字很普通，但它在大脑中却有着举足轻重的作用，它是我们的“情绪中心”，是许多情绪相关通路的核心。</p></blockquote></blockquote><blockquote><blockquote><p>综上所述，愤怒、焦虑、恐惧这三种情绪都跟杏仁核有密切的关系。它们的本质，就是杏仁核出于“威胁识别”功能，对我们的一种警告和提醒。</p></blockquote></blockquote><blockquote><blockquote><p>实际上，许多研究发现：那些行动力比较弱，遇事习惯瞻前顾后、犹豫不决的人，杏仁核的体积往往较大，活动也较为活跃。这就导致他们遇到问题时，总会下意识地夸大风险和后果，自己把自己吓倒，以致寸步难进。</p></blockquote></blockquote><blockquote><blockquote><p>前额叶皮质是大脑皮质中至关重要的一部分，顾名思义，它位于额叶的最前部，大致在额头的位置，主要负责决策、计划、抽象思考、推理和策略等高级功能。在这些功能中，有一个非常基础、重要的功能：抑制。前额叶皮质相当于整个大脑的调度中心，它能够抑制我们各种各样的念头、冲动和行为，让我们冷静下来，为理性思考留出空间，避免被自己的冲动和天性所支配。</p></blockquote></blockquote><blockquote><blockquote><p>我们为这些事情耗费的精力，耽误的时间，造成的内耗，很可能都是白费功夫。你真正要做的是让自己保持良好的状态，不断地强化心态，以便于当那3%￼的问题真正发生时，能够更好地去处理，而不是把注意力停留在那毫无意义的97%上。</p></blockquote></blockquote><blockquote><blockquote><p>如果你总是把一件事情丢给别人决定，或是总是拖延，直到没有余地时才做决定，那么它就会潜移默化地强化“我无法做出决策”的信念，降低你的自我效能感，以及面对威胁时的抵抗力。但反过来，如果你能够做到靠自己的力量果断地做出决策，哪怕结果并不是最好的，也能在潜意识中强化你的内隐自我，让你感受到：我是有能力做出决策的，我是有能力决定和改变外在世界的。那么，当你再次遇到困难和挑战时，当你的内心再一次进入“我究竟能不能做好”的负面情绪时，这些正面信息和内隐自我，就会成为你对抗这种心态的“弹药支撑”，为你源源不断地提供动力。</p></blockquote></blockquote><p>◆  第三章 自我驱动：如何长期坚持做一件事</p><blockquote><blockquote><p>很多人之所以能够自律，并不是他们喜欢苦行、喜欢逼迫自己，而是因为他们从中获得了乐趣。这种乐趣，可能是解决一个问题的快感，可能是成功证明了自己的成就感，可能是朝目标又近一步的愉悦感……总而言之，他们认同自己所做的事情，并能从中感受到价值。</p></blockquote></blockquote><blockquote><blockquote><p>重要的不是你刻意去做什么，而是一点一滴改变整个生活模式，整体地、系统地，让自己进入一个更好的状态。</p></blockquote></blockquote><blockquote><blockquote><p>这种“给自己设定一个数值，再努力去达到这个数值”的思维，只是看起来很美好，但实际上用处不大。因为你的生活不是计数器，我们要做的，是对自己的生活负责，而不是简单粗暴地去规范它。</p></blockquote></blockquote><blockquote><blockquote><p>许多人认为，自律就是要用意志力去约束自己，坚持良好的习惯。如果做不到，就需要锻炼意志力，让它变得更加坚毅。只有这样，才能实现自己的目标。<br>但这一做法其实是低效的。基于意志力的两大假说“延迟满足”和“自我损耗理论”，已经被证明是无效的。并没有一种“意志力”在控制着我们。只要我们认为意志力是无限的，它就可以是无限的。</p></blockquote></blockquote><blockquote><blockquote><p>基于“自驱”，让改变发生，这才是有效的、真正的“自律”。</p></blockquote></blockquote><p>◆  第四章 果断行动：如何摆脱懒惰、拖延和畏难</p><blockquote><blockquote><p>日常生活中，一个人DMN的时间越长，整体的幸福感往往也就越低。</p></blockquote></blockquote><blockquote><blockquote><p>如果你的自信和自尊水准不够高，还可能导致一个更严重的结果：抑郁性反刍。它指的是思维不由自主地聚焦在负面想法上，无法自主地把注意力转移开，既难以去思考“有没有别的可能性”，也无法去想“我可以做些什么，来改变这种现状”，而是一遍又一遍地反刍那些不愉快的经历和念头，导致自我怀疑和自我否定。</p></blockquote></blockquote><blockquote><blockquote><p>DMN本来就是一个“默认”的状态，它才是大脑的常态。我们能做的，是让自己去接纳这些负面想法，但要把主导权抓在自己手里，而不是任由它们主导我们的思维。</p></blockquote></blockquote><blockquote><blockquote><p>行动力&#x3D;（期望×价值）&#x2F;（分心×延迟）。</p></blockquote></blockquote><blockquote><blockquote><p>行动力越高，一个人就越不容易拖延。</p></blockquote></blockquote><blockquote><blockquote><p>可以看出，在什么情况下，我们才会充满行动力去做一件事情呢？要么，这件事情非常简单，立刻就能做完（延迟小）；要么，这件事情的价值非常高，高到可以克服分心和延迟。换句话说，也就是低投入、高回报的事情。</p></blockquote></blockquote><blockquote><blockquote><p>许多人之所以不敢去尝试新事物，就是因为害怕失败，害怕“能力不足”这件事被别人发现，但成长思维告诉我们：不用怕。人的能力永远不是静态的，而是不断变化的。你在一件事上的失败只能说明一件事，那就是你将要变得更厉害了。</p></blockquote></blockquote><blockquote><blockquote><p>从短期来看，人们更容易为“做错”的事情感到后悔，并会想办法去补救、纠正；但一旦把时间拉长，不论程度上还是数量上，“没做”的后悔程度，都会远远超过“做错”。“做错”的后悔可能持续几周、几个月，但“没做”的后悔，可能持续许多年，乃至于成为记忆里一个永久的遗憾</p></blockquote></blockquote><p>◆  第五章 高效学习：如何打造终身受用的学习系统</p><blockquote><blockquote><p>我们学习的效果和省力的程度基本是成反比的。</p></blockquote></blockquote><blockquote><blockquote><p>也就是先通过积累形成若干个主题，再从这些主题出发，想清楚自己缺少什么，需要去弥补什么，然后有意识地去获取知识来填充这些主题，完善这些主题。简言之：先建立框架，再填充框架。</p></blockquote></blockquote><p>◆  第六章 深度思考：如何成为更聪明的人</p><blockquote><blockquote><p>很多时候，决策的本质并不在于选择，而是舍弃。懂得舍弃什么，愿意舍弃什么，是一种勇气，也是一种尤为可贵的能力。</p></blockquote></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;笔记&quot;&gt;&lt;a href=&quot;#笔记&quot; class=&quot;headerlink&quot; title=&quot;笔记&quot;&gt;&lt;/a&gt;笔记&lt;/h1&gt;&lt;p&gt;这本书的观念好像跟之前说的脑科学的书讲的不太一致。&lt;br&gt;主要是说多巴胺的作用，之前读书的认知是，多巴胺是降级机制，而且是即时奖励。但是这本</summary>
      
    
    
    
    
    <category term="读书笔记" scheme="https://derycktse.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
